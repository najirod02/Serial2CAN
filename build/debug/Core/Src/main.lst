ARM GAS  /tmp/ccgQh326.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.section	.rodata.HAL_CAN_RxFifo0MsgPendingCallback.str1.4,"aMS",%progbits,1
  21              		.align	2
  22              	.LC0:
  23 0000 25782578 		.ascii	"%x%x\000"
  23      00
  24 0005 000000   		.align	2
  25              	.LC1:
  26 0008 74256C78 		.ascii	"t%lx%lu%s\015\000"
  26      256C7525 
  26      730D00
  27              		.section	.text.HAL_CAN_RxFifo0MsgPendingCallback,"ax",%progbits
  28              		.align	1
  29              		.global	HAL_CAN_RxFifo0MsgPendingCallback
  30              		.syntax unified
  31              		.thumb
  32              		.thumb_func
  34              	HAL_CAN_RxFifo0MsgPendingCallback:
  35              	.LVL0:
  36              	.LFB137:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
ARM GAS  /tmp/ccgQh326.s 			page 2


  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include "can.h"
  22:Core/Src/main.c **** #include "usart.h"
  23:Core/Src/main.c **** #include "gpio.h"
  24:Core/Src/main.c **** 
  25:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  26:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  27:Core/Src/main.c **** #include "string.h"
  28:Core/Src/main.c **** #include "stdio.h"
  29:Core/Src/main.c **** #include "stdlib.h"
  30:Core/Src/main.c **** #include "math.h"
  31:Core/Src/main.c **** /* USER CODE END Includes */
  32:Core/Src/main.c **** 
  33:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  34:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  35:Core/Src/main.c **** 
  36:Core/Src/main.c **** /* USER CODE END PTD */
  37:Core/Src/main.c **** 
  38:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  39:Core/Src/main.c **** /* USER CODE BEGIN PD */
  40:Core/Src/main.c **** #define BUFFER_SIZE 100
  41:Core/Src/main.c **** #define SERIAL_BUFFER_SIZE 20
  42:Core/Src/main.c **** /* USER CODE END PD */
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  45:Core/Src/main.c **** /* USER CODE BEGIN PM */
  46:Core/Src/main.c **** 
  47:Core/Src/main.c **** /* USER CODE END PM */
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  50:Core/Src/main.c **** 
  51:Core/Src/main.c **** /* USER CODE BEGIN PV */
  52:Core/Src/main.c **** char serialBuffer[SERIAL_BUFFER_SIZE];
  53:Core/Src/main.c **** /* USER CODE END PV */
  54:Core/Src/main.c **** 
  55:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  56:Core/Src/main.c **** void SystemClock_Config(void);
  57:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  58:Core/Src/main.c **** 
  59:Core/Src/main.c **** /* USER CODE END PFP */
  60:Core/Src/main.c **** 
  61:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  62:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  63:Core/Src/main.c **** CAN_TxHeaderTypeDef TxHeader;
  64:Core/Src/main.c **** CAN_RxHeaderTypeDef RxHeader;
  65:Core/Src/main.c **** 
  66:Core/Src/main.c **** //available only 3 mailboxes, the hw will automatically decide which to forward
  67:Core/Src/main.c **** //the frame
  68:Core/Src/main.c **** uint32_t TxMailBox[3];
  69:Core/Src/main.c **** 
  70:Core/Src/main.c **** uint8_t TxData[8];
  71:Core/Src/main.c **** uint8_t RxData[8];
  72:Core/Src/main.c **** 
  73:Core/Src/main.c **** /**
  74:Core/Src/main.c ****  * when we have pending messages, read them, construct a string
  75:Core/Src/main.c ****  * to send back to uart to host pc.
  76:Core/Src/main.c ****  * 
ARM GAS  /tmp/ccgQh326.s 			page 3


  77:Core/Src/main.c ****  * in order to create a compliant slcand frame we have the following format:
  78:Core/Src/main.c ****  * t<ID><DLC><DATA>
  79:Core/Src/main.c ****  * 
  80:Core/Src/main.c ****  * where t indicates a transmition of a frame (read the documentation of slcand
  81:Core/Src/main.c ****  * for more flags for comunication)
  82:Core/Src/main.c ****  */
  83:Core/Src/main.c **** void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
  37              		.loc 1 83 64 view -0
  38              		.cfi_startproc
  39              		@ args = 0, pretend = 0, frame = 24
  40              		@ frame_needed = 1, uses_anonymous_args = 0
  41              		.loc 1 83 64 is_stmt 0 view .LVU1
  42 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  43              		.cfi_def_cfa_offset 24
  44              		.cfi_offset 4, -24
  45              		.cfi_offset 5, -20
  46              		.cfi_offset 6, -16
  47              		.cfi_offset 7, -12
  48              		.cfi_offset 8, -8
  49              		.cfi_offset 14, -4
  50 0004 88B0     		sub	sp, sp, #32
  51              		.cfi_def_cfa_offset 56
  52 0006 02AF     		add	r7, sp, #8
  53              		.cfi_def_cfa 7, 48
  54              		.loc 1 83 64 view .LVU2
  55 0008 E846     		mov	r8, sp
  84:Core/Src/main.c ****   HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
  56              		.loc 1 84 3 is_stmt 1 view .LVU3
  57 000a 1F4C     		ldr	r4, .L7
  58 000c 1F4B     		ldr	r3, .L7+4
  59 000e 2246     		mov	r2, r4
  60 0010 0021     		movs	r1, #0
  61 0012 FFF7FEFF 		bl	HAL_CAN_GetRxMessage
  62              	.LVL1:
  85:Core/Src/main.c ****   char can2Uart[SERIAL_BUFFER_SIZE];
  63              		.loc 1 85 3 view .LVU4
  86:Core/Src/main.c ****   char payload[RxHeader.DLC * 2];
  64              		.loc 1 86 3 view .LVU5
  65              		.loc 1 86 24 is_stmt 0 view .LVU6
  66 0016 2369     		ldr	r3, [r4, #16]
  67              		.loc 1 86 29 view .LVU7
  68 0018 5B00     		lsls	r3, r3, #1
  69              	.LVL2:
  70              		.loc 1 86 8 view .LVU8
  71 001a 0733     		adds	r3, r3, #7
  72              	.LVL3:
  73              		.loc 1 86 8 view .LVU9
  74 001c 23F00703 		bic	r3, r3, #7
  75              	.LVL4:
  76              		.loc 1 86 8 view .LVU10
  77 0020 ADEB030D 		sub	sp, sp, r3
  78 0024 02AE     		add	r6, sp, #8
  79              	.LVL5:
  87:Core/Src/main.c ****   char *offset = payload;
  80              		.loc 1 87 3 is_stmt 1 view .LVU11
  88:Core/Src/main.c **** 
  89:Core/Src/main.c ****   for(int i = 0; i<RxHeader.DLC; i++){
ARM GAS  /tmp/ccgQh326.s 			page 4


  81              		.loc 1 89 3 view .LVU12
  82              	.LBB4:
  83              		.loc 1 89 7 view .LVU13
  84              		.loc 1 89 7 is_stmt 0 view .LVU14
  85              	.LBE4:
  87:Core/Src/main.c ****   char *offset = payload;
  86              		.loc 1 87 9 view .LVU15
  87 0026 3546     		mov	r5, r6
  88              	.LBB6:
  89              		.loc 1 89 11 view .LVU16
  90 0028 0024     		movs	r4, #0
  91              		.loc 1 89 3 view .LVU17
  92 002a 0AE0     		b	.L2
  93              	.LVL6:
  94              	.L3:
  95              	.LBB5:
  90:Core/Src/main.c ****     char first_char = (RxData[i] >> 4);
  96              		.loc 1 90 5 is_stmt 1 view .LVU18
  97              		.loc 1 90 30 is_stmt 0 view .LVU19
  98 002c 174B     		ldr	r3, .L7+4
  99 002e 1A5D     		ldrb	r2, [r3, r4]	@ zero_extendqisi2
 100              	.LVL7:
  91:Core/Src/main.c ****     char second_char = (RxData[i] & 0xF);
 101              		.loc 1 91 5 is_stmt 1 view .LVU20
  92:Core/Src/main.c ****     
  93:Core/Src/main.c ****     sprintf(offset, "%x%x", first_char, second_char);
 102              		.loc 1 93 5 view .LVU21
 103 0030 02F00F03 		and	r3, r2, #15
 104 0034 1209     		lsrs	r2, r2, #4
 105              	.LVL8:
 106              		.loc 1 93 5 is_stmt 0 view .LVU22
 107 0036 1649     		ldr	r1, .L7+8
 108 0038 2846     		mov	r0, r5
 109 003a FFF7FEFF 		bl	sprintf
 110              	.LVL9:
  94:Core/Src/main.c ****     offset+=2;
 111              		.loc 1 94 5 is_stmt 1 view .LVU23
 112              		.loc 1 94 11 is_stmt 0 view .LVU24
 113 003e 0235     		adds	r5, r5, #2
 114              	.LVL10:
 115              		.loc 1 94 11 view .LVU25
 116              	.LBE5:
  89:Core/Src/main.c ****     char first_char = (RxData[i] >> 4);
 117              		.loc 1 89 35 is_stmt 1 discriminator 3 view .LVU26
 118 0040 0134     		adds	r4, r4, #1
 119              	.LVL11:
 120              	.L2:
  89:Core/Src/main.c ****     char first_char = (RxData[i] >> 4);
 121              		.loc 1 89 19 discriminator 1 view .LVU27
  89:Core/Src/main.c ****     char first_char = (RxData[i] >> 4);
 122              		.loc 1 89 28 is_stmt 0 discriminator 1 view .LVU28
 123 0042 114B     		ldr	r3, .L7
 124 0044 1B69     		ldr	r3, [r3, #16]
  89:Core/Src/main.c ****     char first_char = (RxData[i] >> 4);
 125              		.loc 1 89 19 discriminator 1 view .LVU29
 126 0046 A342     		cmp	r3, r4
 127 0048 F0D8     		bhi	.L3
ARM GAS  /tmp/ccgQh326.s 			page 5


  89:Core/Src/main.c ****     char first_char = (RxData[i] >> 4);
 128              		.loc 1 89 19 discriminator 1 view .LVU30
 129              	.LBE6:
  95:Core/Src/main.c ****   }
  96:Core/Src/main.c **** 
  97:Core/Src/main.c ****   sprintf(can2Uart, "t%lx%lu%s\r", RxHeader.StdId, RxHeader.DLC, payload);
 130              		.loc 1 97 3 is_stmt 1 view .LVU31
 131 004a 0F4A     		ldr	r2, .L7
 132 004c 1268     		ldr	r2, [r2]
 133 004e 0096     		str	r6, [sp]
 134 0050 1049     		ldr	r1, .L7+12
 135 0052 381D     		adds	r0, r7, #4
 136 0054 FFF7FEFF 		bl	sprintf
 137              	.LVL12:
  98:Core/Src/main.c **** 
  99:Core/Src/main.c ****   //for test, send back a random frame so that it can be checked with candump
 100:Core/Src/main.c ****   //char can2Uart[] = "t4563112233\r";// can_id 0x456, len 3, data 0x11 0x22 0x33
 101:Core/Src/main.c **** 
 102:Core/Src/main.c ****   HAL_StatusTypeDef result =  HAL_UART_Transmit(&huart2, (uint8_t *) can2Uart, strlen(can2Uart), HA
 138              		.loc 1 102 3 view .LVU32
 139              		.loc 1 102 80 is_stmt 0 view .LVU33
 140 0058 381D     		adds	r0, r7, #4
 141 005a FFF7FEFF 		bl	strlen
 142              	.LVL13:
 143              		.loc 1 102 31 discriminator 1 view .LVU34
 144 005e 4FF0FF33 		mov	r3, #-1
 145 0062 82B2     		uxth	r2, r0
 146 0064 391D     		adds	r1, r7, #4
 147 0066 0C48     		ldr	r0, .L7+16
 148 0068 FFF7FEFF 		bl	HAL_UART_Transmit
 149              	.LVL14:
 103:Core/Src/main.c ****   if(result != HAL_OK) return;
 150              		.loc 1 103 3 is_stmt 1 view .LVU35
 151              		.loc 1 103 5 is_stmt 0 view .LVU36
 152 006c 20B1     		cbz	r0, .L4
 153              		.loc 1 103 24 is_stmt 1 discriminator 1 view .LVU37
 154              		.loc 1 103 24 is_stmt 0 discriminator 2 view .LVU38
 155 006e C546     		mov	sp, r8
 156              	.LVL15:
 157              	.L1:
 104:Core/Src/main.c ****   //if toggles then message sent
 105:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 106:Core/Src/main.c ****   
 107:Core/Src/main.c **** }
 158              		.loc 1 107 1 view .LVU39
 159 0070 1837     		adds	r7, r7, #24
 160              		.cfi_remember_state
 161              		.cfi_def_cfa_offset 24
 162 0072 BD46     		mov	sp, r7
 163              		.cfi_def_cfa_register 13
 164              		@ sp needed
 165 0074 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 166              	.LVL16:
 167              	.L4:
 168              		.cfi_restore_state
 105:Core/Src/main.c ****   
 169              		.loc 1 105 3 is_stmt 1 view .LVU40
ARM GAS  /tmp/ccgQh326.s 			page 6


 170 0078 0122     		movs	r2, #1
 171 007a 2021     		movs	r1, #32
 172 007c 0748     		ldr	r0, .L7+20
 173              	.LVL17:
 105:Core/Src/main.c ****   
 174              		.loc 1 105 3 is_stmt 0 view .LVU41
 175 007e FFF7FEFF 		bl	HAL_GPIO_WritePin
 176              	.LVL18:
 177 0082 C546     		mov	sp, r8
 178 0084 F4E7     		b	.L1
 179              	.L8:
 180 0086 00BF     		.align	2
 181              	.L7:
 182 0088 00000000 		.word	RxHeader
 183 008c 00000000 		.word	RxData
 184 0090 00000000 		.word	.LC0
 185 0094 08000000 		.word	.LC1
 186 0098 00000000 		.word	huart2
 187 009c 00000240 		.word	1073872896
 188              		.cfi_endproc
 189              	.LFE137:
 191              		.global	__aeabi_i2d
 192              		.global	__aeabi_dmul
 193              		.global	__aeabi_ui2d
 194              		.global	__aeabi_dadd
 195              		.global	__aeabi_d2uiz
 196              		.section	.text.HAL_UARTEx_RxEventCallback,"ax",%progbits
 197              		.align	1
 198              		.global	HAL_UARTEx_RxEventCallback
 199              		.syntax unified
 200              		.thumb
 201              		.thumb_func
 203              	HAL_UARTEx_RxEventCallback:
 204              	.LVL19:
 205              	.LFB138:
 108:Core/Src/main.c **** 
 109:Core/Src/main.c **** /**
 110:Core/Src/main.c ****  * when a can frame is received from the serial, create a new frame to send
 111:Core/Src/main.c ****  * through the "real" can interface
 112:Core/Src/main.c ****  */
 113:Core/Src/main.c **** void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
 114:Core/Src/main.c **** {
 206              		.loc 1 114 1 is_stmt 1 view -0
 207              		.cfi_startproc
 208              		@ args = 0, pretend = 0, frame = 8
 209              		@ frame_needed = 0, uses_anonymous_args = 0
 210              		.loc 1 114 1 is_stmt 0 view .LVU43
 211 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 212              		.cfi_def_cfa_offset 24
 213              		.cfi_offset 4, -24
 214              		.cfi_offset 5, -20
 215              		.cfi_offset 6, -16
 216              		.cfi_offset 7, -12
 217              		.cfi_offset 8, -8
 218              		.cfi_offset 14, -4
 219 0004 82B0     		sub	sp, sp, #8
 220              		.cfi_def_cfa_offset 32
ARM GAS  /tmp/ccgQh326.s 			page 7


 115:Core/Src/main.c ****   //create the can frame and send it to a mailbox
 116:Core/Src/main.c ****   TxHeader.DLC = serialBuffer[4] - '0'; //number of bytes to send (max 8 bytes)
 221              		.loc 1 116 3 is_stmt 1 view .LVU44
 222              		.loc 1 116 30 is_stmt 0 view .LVU45
 223 0006 324B     		ldr	r3, .L17+8
 224 0008 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 225              		.loc 1 116 34 view .LVU46
 226 000a 303B     		subs	r3, r3, #48
 227              		.loc 1 116 16 view .LVU47
 228 000c 314A     		ldr	r2, .L17+12
 229 000e 1361     		str	r3, [r2, #16]
 117:Core/Src/main.c ****   TxHeader.ExtId = 0; //we are not using extended id
 230              		.loc 1 117 3 is_stmt 1 view .LVU48
 231              		.loc 1 117 18 is_stmt 0 view .LVU49
 232 0010 0023     		movs	r3, #0
 233 0012 5360     		str	r3, [r2, #4]
 118:Core/Src/main.c ****   //setting identifier of frame
 119:Core/Src/main.c ****   char id[4];
 234              		.loc 1 119 3 is_stmt 1 view .LVU50
 120:Core/Src/main.c ****   //char t skipped at the moment for testing
 121:Core/Src/main.c ****   for(int i = 1; i <= 3; i++)
 235              		.loc 1 121 3 view .LVU51
 236              	.LBB7:
 237              		.loc 1 121 7 view .LVU52
 238              	.LVL20:
 239              		.loc 1 121 11 is_stmt 0 view .LVU53
 240 0014 0123     		movs	r3, #1
 241              		.loc 1 121 3 view .LVU54
 242 0016 06E0     		b	.L10
 243              	.LVL21:
 244              	.L11:
 122:Core/Src/main.c ****     id[i-1] = serialBuffer[i];
 245              		.loc 1 122 5 is_stmt 1 view .LVU55
 246              		.loc 1 122 27 is_stmt 0 view .LVU56
 247 0018 2D49     		ldr	r1, .L17+8
 248 001a C95C     		ldrb	r1, [r1, r3]	@ zero_extendqisi2
 249              		.loc 1 122 13 view .LVU57
 250 001c DA1D     		adds	r2, r3, #7
 251 001e 6A44     		add	r2, sp, r2
 252 0020 02F8041C 		strb	r1, [r2, #-4]
 121:Core/Src/main.c ****     id[i-1] = serialBuffer[i];
 253              		.loc 1 121 27 is_stmt 1 discriminator 3 view .LVU58
 254 0024 0133     		adds	r3, r3, #1
 255              	.LVL22:
 256              	.L10:
 121:Core/Src/main.c ****     id[i-1] = serialBuffer[i];
 257              		.loc 1 121 20 discriminator 1 view .LVU59
 258 0026 032B     		cmp	r3, #3
 259 0028 F6DD     		ble	.L11
 260              	.LBE7:
 123:Core/Src/main.c ****   id[3] = '\0';
 261              		.loc 1 123 3 view .LVU60
 262              		.loc 1 123 9 is_stmt 0 view .LVU61
 263 002a 0024     		movs	r4, #0
 264 002c 8DF80740 		strb	r4, [sp, #7]
 124:Core/Src/main.c **** 
 125:Core/Src/main.c ****   uint32_t id_decimal = 0;
ARM GAS  /tmp/ccgQh326.s 			page 8


 265              		.loc 1 125 3 is_stmt 1 view .LVU62
 266              	.LVL23:
 126:Core/Src/main.c ****   for(int i=0; i<3; i++){
 267              		.loc 1 126 3 view .LVU63
 268              	.LBB8:
 269              		.loc 1 126 7 view .LVU64
 270              		.loc 1 126 11 is_stmt 0 view .LVU65
 271 0030 2546     		mov	r5, r4
 272              		.loc 1 126 3 view .LVU66
 273 0032 26E0     		b	.L12
 274              	.LVL24:
 275              	.L13:
 127:Core/Src/main.c ****     id_decimal += (id[i] - '0') * pow(16, 2-i);
 276              		.loc 1 127 5 is_stmt 1 view .LVU67
 277              		.loc 1 127 22 is_stmt 0 view .LVU68
 278 0034 05F10803 		add	r3, r5, #8
 279 0038 6B44     		add	r3, sp, r3
 280 003a 13F8048C 		ldrb	r8, [r3, #-4]	@ zero_extendqisi2
 281              		.loc 1 127 26 view .LVU69
 282 003e A8F13008 		sub	r8, r8, #48
 283              		.loc 1 127 35 view .LVU70
 284 0042 C5F10200 		rsb	r0, r5, #2
 285 0046 FFF7FEFF 		bl	__aeabi_i2d
 286              	.LVL25:
 287 004a 41EC110B 		vmov	d1, r0, r1
 288 004e 9FED1E0B 		vldr.64	d0, .L17
 289 0052 FFF7FEFF 		bl	pow
 290              	.LVL26:
 291 0056 57EC106B 		vmov	r6, r7, d0
 292              		.loc 1 127 33 view .LVU71
 293 005a 4046     		mov	r0, r8
 294 005c FFF7FEFF 		bl	__aeabi_i2d
 295              	.LVL27:
 296              		.loc 1 127 33 discriminator 1 view .LVU72
 297 0060 3246     		mov	r2, r6
 298 0062 3B46     		mov	r3, r7
 299 0064 FFF7FEFF 		bl	__aeabi_dmul
 300              	.LVL28:
 301 0068 0646     		mov	r6, r0
 302 006a 0F46     		mov	r7, r1
 303              		.loc 1 127 16 discriminator 1 view .LVU73
 304 006c 2046     		mov	r0, r4
 305 006e FFF7FEFF 		bl	__aeabi_ui2d
 306              	.LVL29:
 307 0072 3246     		mov	r2, r6
 308 0074 3B46     		mov	r3, r7
 309 0076 FFF7FEFF 		bl	__aeabi_dadd
 310              	.LVL30:
 311 007a FFF7FEFF 		bl	__aeabi_d2uiz
 312              	.LVL31:
 313 007e 0446     		mov	r4, r0
 314              	.LVL32:
 126:Core/Src/main.c ****   for(int i=0; i<3; i++){
 315              		.loc 1 126 22 is_stmt 1 discriminator 3 view .LVU74
 316 0080 0135     		adds	r5, r5, #1
 317              	.LVL33:
 318              	.L12:
ARM GAS  /tmp/ccgQh326.s 			page 9


 126:Core/Src/main.c ****   for(int i=0; i<3; i++){
 319              		.loc 1 126 17 discriminator 1 view .LVU75
 320 0082 022D     		cmp	r5, #2
 321 0084 D6DD     		ble	.L13
 322              	.LBE8:
 128:Core/Src/main.c ****   }
 129:Core/Src/main.c **** 
 130:Core/Src/main.c ****   TxHeader.StdId = id_decimal;//identifier of the board 
 323              		.loc 1 130 3 view .LVU76
 324              		.loc 1 130 18 is_stmt 0 view .LVU77
 325 0086 134B     		ldr	r3, .L17+12
 326 0088 1C60     		str	r4, [r3]
 131:Core/Src/main.c ****   TxHeader.TransmitGlobalTime = DISABLE;
 327              		.loc 1 131 3 is_stmt 1 view .LVU78
 328              		.loc 1 131 31 is_stmt 0 view .LVU79
 329 008a 0022     		movs	r2, #0
 330 008c 1A75     		strb	r2, [r3, #20]
 132:Core/Src/main.c **** 
 133:Core/Src/main.c ****   //collect payload to send
 134:Core/Src/main.c ****   //skip # char
 135:Core/Src/main.c ****   for(int i = 5; i < strlen(serialBuffer); i++){
 331              		.loc 1 135 3 is_stmt 1 view .LVU80
 332              	.LBB9:
 333              		.loc 1 135 7 view .LVU81
 334              	.LVL34:
 335              		.loc 1 135 11 is_stmt 0 view .LVU82
 336 008e 0524     		movs	r4, #5
 337              	.LVL35:
 338              		.loc 1 135 3 view .LVU83
 339 0090 05E0     		b	.L14
 340              	.LVL36:
 341              	.L15:
 136:Core/Src/main.c ****     TxData[i-5] = serialBuffer[i];
 342              		.loc 1 136 5 is_stmt 1 view .LVU84
 343              		.loc 1 136 13 is_stmt 0 view .LVU85
 344 0092 631F     		subs	r3, r4, #5
 345              		.loc 1 136 31 view .LVU86
 346 0094 0E4A     		ldr	r2, .L17+8
 347 0096 115D     		ldrb	r1, [r2, r4]	@ zero_extendqisi2
 348              		.loc 1 136 17 view .LVU87
 349 0098 0F4A     		ldr	r2, .L17+16
 350 009a D154     		strb	r1, [r2, r3]
 135:Core/Src/main.c ****     TxData[i-5] = serialBuffer[i];
 351              		.loc 1 135 45 is_stmt 1 discriminator 3 view .LVU88
 352 009c 0134     		adds	r4, r4, #1
 353              	.LVL37:
 354              	.L14:
 135:Core/Src/main.c ****     TxData[i-5] = serialBuffer[i];
 355              		.loc 1 135 20 discriminator 1 view .LVU89
 135:Core/Src/main.c ****     TxData[i-5] = serialBuffer[i];
 356              		.loc 1 135 22 is_stmt 0 discriminator 1 view .LVU90
 357 009e 0C48     		ldr	r0, .L17+8
 358 00a0 FFF7FEFF 		bl	strlen
 359              	.LVL38:
 135:Core/Src/main.c ****     TxData[i-5] = serialBuffer[i];
 360              		.loc 1 135 20 discriminator 1 view .LVU91
 361 00a4 A042     		cmp	r0, r4
ARM GAS  /tmp/ccgQh326.s 			page 10


 362 00a6 F4D8     		bhi	.L15
 363              	.LBE9:
 137:Core/Src/main.c ****   }
 138:Core/Src/main.c **** 
 139:Core/Src/main.c ****   HAL_CAN_AddTxMessage(&hcan1, &TxHeader, &TxData[0], &TxMailBox[0]);
 364              		.loc 1 139 3 is_stmt 1 view .LVU92
 365 00a8 0C4B     		ldr	r3, .L17+20
 366 00aa 0B4A     		ldr	r2, .L17+16
 367 00ac 0949     		ldr	r1, .L17+12
 368 00ae 0C48     		ldr	r0, .L17+24
 369 00b0 FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 370              	.LVL39:
 140:Core/Src/main.c **** 
 141:Core/Src/main.c ****   //remain in listening for a new cansend frame
 142:Core/Src/main.c ****   HAL_UARTEx_ReceiveToIdle_IT(&huart2, (uint8_t *)serialBuffer, SERIAL_BUFFER_SIZE);
 371              		.loc 1 142 3 view .LVU93
 372 00b4 1422     		movs	r2, #20
 373 00b6 0649     		ldr	r1, .L17+8
 374 00b8 0A48     		ldr	r0, .L17+28
 375 00ba FFF7FEFF 		bl	HAL_UARTEx_ReceiveToIdle_IT
 376              	.LVL40:
 143:Core/Src/main.c **** }
 377              		.loc 1 143 1 is_stmt 0 view .LVU94
 378 00be 02B0     		add	sp, sp, #8
 379              		.cfi_def_cfa_offset 24
 380              		@ sp needed
 381 00c0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 382              	.LVL41:
 383              	.L18:
 384              		.loc 1 143 1 view .LVU95
 385 00c4 AFF30080 		.align	3
 386              	.L17:
 387 00c8 00000000 		.word	0
 388 00cc 00003040 		.word	1076887552
 389 00d0 00000000 		.word	serialBuffer
 390 00d4 00000000 		.word	TxHeader
 391 00d8 00000000 		.word	TxData
 392 00dc 00000000 		.word	TxMailBox
 393 00e0 00000000 		.word	hcan1
 394 00e4 00000000 		.word	huart2
 395              		.cfi_endproc
 396              	.LFE138:
 398              		.section	.text.Error_Handler,"ax",%progbits
 399              		.align	1
 400              		.global	Error_Handler
 401              		.syntax unified
 402              		.thumb
 403              		.thumb_func
 405              	Error_Handler:
 406              	.LFB141:
 144:Core/Src/main.c **** 
 145:Core/Src/main.c **** /* USER CODE END 0 */
 146:Core/Src/main.c **** 
 147:Core/Src/main.c **** /**
 148:Core/Src/main.c ****   * @brief  The application entry point.
 149:Core/Src/main.c ****   * @retval int
 150:Core/Src/main.c ****   */
ARM GAS  /tmp/ccgQh326.s 			page 11


 151:Core/Src/main.c **** int main(void)
 152:Core/Src/main.c **** {
 153:Core/Src/main.c **** 
 154:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 155:Core/Src/main.c ****   /* USER CODE END 1 */
 156:Core/Src/main.c **** 
 157:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 158:Core/Src/main.c **** 
 159:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 160:Core/Src/main.c ****   HAL_Init();
 161:Core/Src/main.c **** 
 162:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 163:Core/Src/main.c **** 
 164:Core/Src/main.c ****   /* USER CODE END Init */
 165:Core/Src/main.c **** 
 166:Core/Src/main.c ****   /* Configure the system clock */
 167:Core/Src/main.c ****   SystemClock_Config();
 168:Core/Src/main.c **** 
 169:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 170:Core/Src/main.c **** 
 171:Core/Src/main.c ****   /* USER CODE END SysInit */
 172:Core/Src/main.c **** 
 173:Core/Src/main.c ****   /* Initialize all configured peripherals */
 174:Core/Src/main.c ****   MX_GPIO_Init();
 175:Core/Src/main.c ****   MX_USART2_UART_Init();
 176:Core/Src/main.c ****   MX_CAN1_Init();
 177:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 178:Core/Src/main.c ****   HAL_CAN_Start(&hcan1);
 179:Core/Src/main.c ****   HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 180:Core/Src/main.c **** 
 181:Core/Src/main.c ****   /* USER CODE END 2 */
 182:Core/Src/main.c **** 
 183:Core/Src/main.c ****   /* Infinite loop */
 184:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 185:Core/Src/main.c **** 
 186:Core/Src/main.c ****   //remain in listening for a cansend frame
 187:Core/Src/main.c ****   HAL_UARTEx_ReceiveToIdle_IT(&huart2, (uint8_t *)serialBuffer, SERIAL_BUFFER_SIZE);
 188:Core/Src/main.c **** 
 189:Core/Src/main.c ****   while (1)
 190:Core/Src/main.c ****   {
 191:Core/Src/main.c ****     /* USER CODE END WHILE */
 192:Core/Src/main.c **** 
 193:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 194:Core/Src/main.c ****   }
 195:Core/Src/main.c ****   /* USER CODE END 3 */
 196:Core/Src/main.c **** }
 197:Core/Src/main.c **** 
 198:Core/Src/main.c **** /**
 199:Core/Src/main.c ****   * @brief System Clock Configuration
 200:Core/Src/main.c ****   * @retval None
 201:Core/Src/main.c ****   */
 202:Core/Src/main.c **** void SystemClock_Config(void)
 203:Core/Src/main.c **** {
 204:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 205:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 206:Core/Src/main.c **** 
 207:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
ARM GAS  /tmp/ccgQh326.s 			page 12


 208:Core/Src/main.c ****   */
 209:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 210:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 211:Core/Src/main.c **** 
 212:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 213:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 214:Core/Src/main.c ****   */
 215:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 216:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 217:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 218:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 219:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 4;
 220:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 72;
 221:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 222:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 3;
 223:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 224:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 225:Core/Src/main.c ****   {
 226:Core/Src/main.c ****     Error_Handler();
 227:Core/Src/main.c ****   }
 228:Core/Src/main.c **** 
 229:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 230:Core/Src/main.c ****   */
 231:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 232:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 233:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 234:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 235:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 236:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 237:Core/Src/main.c **** 
 238:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 239:Core/Src/main.c ****   {
 240:Core/Src/main.c ****     Error_Handler();
 241:Core/Src/main.c ****   }
 242:Core/Src/main.c **** }
 243:Core/Src/main.c **** 
 244:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 245:Core/Src/main.c **** 
 246:Core/Src/main.c **** /* USER CODE END 4 */
 247:Core/Src/main.c **** 
 248:Core/Src/main.c **** /**
 249:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 250:Core/Src/main.c ****   * @retval None
 251:Core/Src/main.c ****   */
 252:Core/Src/main.c **** void Error_Handler(void)
 253:Core/Src/main.c **** {
 407              		.loc 1 253 1 is_stmt 1 view -0
 408              		.cfi_startproc
 409              		@ Volatile: function does not return.
 410              		@ args = 0, pretend = 0, frame = 0
 411              		@ frame_needed = 0, uses_anonymous_args = 0
 412              		@ link register save eliminated.
 254:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 255:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 256:Core/Src/main.c ****   __disable_irq();
 413              		.loc 1 256 3 view .LVU97
 414              	.LBB10:
ARM GAS  /tmp/ccgQh326.s 			page 13


 415              	.LBI10:
 416              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
ARM GAS  /tmp/ccgQh326.s 			page 14


  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccgQh326.s 			page 15


 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
ARM GAS  /tmp/ccgQh326.s 			page 16


 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
ARM GAS  /tmp/ccgQh326.s 			page 17


 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccgQh326.s 			page 18


 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
ARM GAS  /tmp/ccgQh326.s 			page 19


 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccgQh326.s 			page 20


 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
ARM GAS  /tmp/ccgQh326.s 			page 21


 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccgQh326.s 			page 22


 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccgQh326.s 			page 23


 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
ARM GAS  /tmp/ccgQh326.s 			page 24


 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccgQh326.s 			page 25


 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
ARM GAS  /tmp/ccgQh326.s 			page 26


 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
ARM GAS  /tmp/ccgQh326.s 			page 27


 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
ARM GAS  /tmp/ccgQh326.s 			page 28


 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccgQh326.s 			page 29


 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 417              		.loc 2 960 27 view .LVU98
 418              	.LBB11:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 419              		.loc 2 962 3 view .LVU99
 420              		.syntax unified
 421              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
ARM GAS  /tmp/ccgQh326.s 			page 30


 422 0000 72B6     		cpsid i
 423              	@ 0 "" 2
 424              		.thumb
 425              		.syntax unified
 426              	.L20:
 427              	.LBE11:
 428              	.LBE10:
 257:Core/Src/main.c ****   while (1)
 429              		.loc 1 257 3 view .LVU100
 258:Core/Src/main.c ****   {
 259:Core/Src/main.c ****   }
 430              		.loc 1 259 3 view .LVU101
 257:Core/Src/main.c ****   while (1)
 431              		.loc 1 257 9 view .LVU102
 432 0002 FEE7     		b	.L20
 433              		.cfi_endproc
 434              	.LFE141:
 436              		.section	.text.SystemClock_Config,"ax",%progbits
 437              		.align	1
 438              		.global	SystemClock_Config
 439              		.syntax unified
 440              		.thumb
 441              		.thumb_func
 443              	SystemClock_Config:
 444              	.LFB140:
 203:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 445              		.loc 1 203 1 view -0
 446              		.cfi_startproc
 447              		@ args = 0, pretend = 0, frame = 80
 448              		@ frame_needed = 0, uses_anonymous_args = 0
 449 0000 00B5     		push	{lr}
 450              		.cfi_def_cfa_offset 4
 451              		.cfi_offset 14, -4
 452 0002 95B0     		sub	sp, sp, #84
 453              		.cfi_def_cfa_offset 88
 204:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 454              		.loc 1 204 3 view .LVU104
 204:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 455              		.loc 1 204 22 is_stmt 0 view .LVU105
 456 0004 3422     		movs	r2, #52
 457 0006 0021     		movs	r1, #0
 458 0008 07A8     		add	r0, sp, #28
 459 000a FFF7FEFF 		bl	memset
 460              	.LVL42:
 205:Core/Src/main.c **** 
 461              		.loc 1 205 3 is_stmt 1 view .LVU106
 205:Core/Src/main.c **** 
 462              		.loc 1 205 22 is_stmt 0 view .LVU107
 463 000e 0023     		movs	r3, #0
 464 0010 0293     		str	r3, [sp, #8]
 465 0012 0393     		str	r3, [sp, #12]
 466 0014 0493     		str	r3, [sp, #16]
 467 0016 0593     		str	r3, [sp, #20]
 468 0018 0693     		str	r3, [sp, #24]
 209:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 469              		.loc 1 209 3 is_stmt 1 view .LVU108
 470              	.LBB12:
ARM GAS  /tmp/ccgQh326.s 			page 31


 209:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 471              		.loc 1 209 3 view .LVU109
 472 001a 0093     		str	r3, [sp]
 209:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 473              		.loc 1 209 3 view .LVU110
 474 001c 204A     		ldr	r2, .L27
 475 001e 116C     		ldr	r1, [r2, #64]
 476 0020 41F08051 		orr	r1, r1, #268435456
 477 0024 1164     		str	r1, [r2, #64]
 209:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 478              		.loc 1 209 3 view .LVU111
 479 0026 126C     		ldr	r2, [r2, #64]
 480 0028 02F08052 		and	r2, r2, #268435456
 481 002c 0092     		str	r2, [sp]
 209:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 482              		.loc 1 209 3 view .LVU112
 483 002e 009A     		ldr	r2, [sp]
 484              	.LBE12:
 209:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 485              		.loc 1 209 3 view .LVU113
 210:Core/Src/main.c **** 
 486              		.loc 1 210 3 view .LVU114
 487              	.LBB13:
 210:Core/Src/main.c **** 
 488              		.loc 1 210 3 view .LVU115
 489 0030 0193     		str	r3, [sp, #4]
 210:Core/Src/main.c **** 
 490              		.loc 1 210 3 view .LVU116
 491 0032 1C4A     		ldr	r2, .L27+4
 492 0034 1368     		ldr	r3, [r2]
 493 0036 23F44043 		bic	r3, r3, #49152
 494 003a 43F48043 		orr	r3, r3, #16384
 495 003e 1360     		str	r3, [r2]
 210:Core/Src/main.c **** 
 496              		.loc 1 210 3 view .LVU117
 497 0040 1368     		ldr	r3, [r2]
 498 0042 03F44043 		and	r3, r3, #49152
 499 0046 0193     		str	r3, [sp, #4]
 210:Core/Src/main.c **** 
 500              		.loc 1 210 3 view .LVU118
 501 0048 019B     		ldr	r3, [sp, #4]
 502              	.LBE13:
 210:Core/Src/main.c **** 
 503              		.loc 1 210 3 view .LVU119
 215:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 504              		.loc 1 215 3 view .LVU120
 215:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 505              		.loc 1 215 36 is_stmt 0 view .LVU121
 506 004a 0123     		movs	r3, #1
 507 004c 0793     		str	r3, [sp, #28]
 216:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 508              		.loc 1 216 3 is_stmt 1 view .LVU122
 216:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 509              		.loc 1 216 30 is_stmt 0 view .LVU123
 510 004e 4FF48033 		mov	r3, #65536
 511 0052 0893     		str	r3, [sp, #32]
 217:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
ARM GAS  /tmp/ccgQh326.s 			page 32


 512              		.loc 1 217 3 is_stmt 1 view .LVU124
 217:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 513              		.loc 1 217 34 is_stmt 0 view .LVU125
 514 0054 0223     		movs	r3, #2
 515 0056 0D93     		str	r3, [sp, #52]
 218:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 4;
 516              		.loc 1 218 3 is_stmt 1 view .LVU126
 218:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 4;
 517              		.loc 1 218 35 is_stmt 0 view .LVU127
 518 0058 4FF48002 		mov	r2, #4194304
 519 005c 0E92     		str	r2, [sp, #56]
 219:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 72;
 520              		.loc 1 219 3 is_stmt 1 view .LVU128
 219:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 72;
 521              		.loc 1 219 30 is_stmt 0 view .LVU129
 522 005e 0422     		movs	r2, #4
 523 0060 0F92     		str	r2, [sp, #60]
 220:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 524              		.loc 1 220 3 is_stmt 1 view .LVU130
 220:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 525              		.loc 1 220 30 is_stmt 0 view .LVU131
 526 0062 4822     		movs	r2, #72
 527 0064 1092     		str	r2, [sp, #64]
 221:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 3;
 528              		.loc 1 221 3 is_stmt 1 view .LVU132
 221:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 3;
 529              		.loc 1 221 30 is_stmt 0 view .LVU133
 530 0066 1193     		str	r3, [sp, #68]
 222:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 531              		.loc 1 222 3 is_stmt 1 view .LVU134
 222:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 532              		.loc 1 222 30 is_stmt 0 view .LVU135
 533 0068 0322     		movs	r2, #3
 534 006a 1292     		str	r2, [sp, #72]
 223:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 535              		.loc 1 223 3 is_stmt 1 view .LVU136
 223:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 536              		.loc 1 223 30 is_stmt 0 view .LVU137
 537 006c 1393     		str	r3, [sp, #76]
 224:Core/Src/main.c ****   {
 538              		.loc 1 224 3 is_stmt 1 view .LVU138
 224:Core/Src/main.c ****   {
 539              		.loc 1 224 7 is_stmt 0 view .LVU139
 540 006e 07A8     		add	r0, sp, #28
 541 0070 FFF7FEFF 		bl	HAL_RCC_OscConfig
 542              	.LVL43:
 224:Core/Src/main.c ****   {
 543              		.loc 1 224 6 discriminator 1 view .LVU140
 544 0074 80B9     		cbnz	r0, .L25
 231:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 545              		.loc 1 231 3 is_stmt 1 view .LVU141
 231:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 546              		.loc 1 231 31 is_stmt 0 view .LVU142
 547 0076 0F23     		movs	r3, #15
 548 0078 0293     		str	r3, [sp, #8]
 233:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 549              		.loc 1 233 3 is_stmt 1 view .LVU143
ARM GAS  /tmp/ccgQh326.s 			page 33


 233:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 550              		.loc 1 233 34 is_stmt 0 view .LVU144
 551 007a 0221     		movs	r1, #2
 552 007c 0391     		str	r1, [sp, #12]
 234:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 553              		.loc 1 234 3 is_stmt 1 view .LVU145
 234:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 554              		.loc 1 234 35 is_stmt 0 view .LVU146
 555 007e 0023     		movs	r3, #0
 556 0080 0493     		str	r3, [sp, #16]
 235:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 557              		.loc 1 235 3 is_stmt 1 view .LVU147
 235:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 558              		.loc 1 235 36 is_stmt 0 view .LVU148
 559 0082 4FF48052 		mov	r2, #4096
 560 0086 0592     		str	r2, [sp, #20]
 236:Core/Src/main.c **** 
 561              		.loc 1 236 3 is_stmt 1 view .LVU149
 236:Core/Src/main.c **** 
 562              		.loc 1 236 36 is_stmt 0 view .LVU150
 563 0088 0693     		str	r3, [sp, #24]
 238:Core/Src/main.c ****   {
 564              		.loc 1 238 3 is_stmt 1 view .LVU151
 238:Core/Src/main.c ****   {
 565              		.loc 1 238 7 is_stmt 0 view .LVU152
 566 008a 02A8     		add	r0, sp, #8
 567 008c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 568              	.LVL44:
 238:Core/Src/main.c ****   {
 569              		.loc 1 238 6 discriminator 1 view .LVU153
 570 0090 20B9     		cbnz	r0, .L26
 242:Core/Src/main.c **** 
 571              		.loc 1 242 1 view .LVU154
 572 0092 15B0     		add	sp, sp, #84
 573              		.cfi_remember_state
 574              		.cfi_def_cfa_offset 4
 575              		@ sp needed
 576 0094 5DF804FB 		ldr	pc, [sp], #4
 577              	.L25:
 578              		.cfi_restore_state
 226:Core/Src/main.c ****   }
 579              		.loc 1 226 5 is_stmt 1 view .LVU155
 580 0098 FFF7FEFF 		bl	Error_Handler
 581              	.LVL45:
 582              	.L26:
 240:Core/Src/main.c ****   }
 583              		.loc 1 240 5 view .LVU156
 584 009c FFF7FEFF 		bl	Error_Handler
 585              	.LVL46:
 586              	.L28:
 587              		.align	2
 588              	.L27:
 589 00a0 00380240 		.word	1073887232
 590 00a4 00700040 		.word	1073770496
 591              		.cfi_endproc
 592              	.LFE140:
 594              		.section	.text.main,"ax",%progbits
ARM GAS  /tmp/ccgQh326.s 			page 34


 595              		.align	1
 596              		.global	main
 597              		.syntax unified
 598              		.thumb
 599              		.thumb_func
 601              	main:
 602              	.LFB139:
 152:Core/Src/main.c **** 
 603              		.loc 1 152 1 view -0
 604              		.cfi_startproc
 605              		@ Volatile: function does not return.
 606              		@ args = 0, pretend = 0, frame = 0
 607              		@ frame_needed = 0, uses_anonymous_args = 0
 608 0000 08B5     		push	{r3, lr}
 609              		.cfi_def_cfa_offset 8
 610              		.cfi_offset 3, -8
 611              		.cfi_offset 14, -4
 160:Core/Src/main.c **** 
 612              		.loc 1 160 3 view .LVU158
 613 0002 FFF7FEFF 		bl	HAL_Init
 614              	.LVL47:
 167:Core/Src/main.c **** 
 615              		.loc 1 167 3 view .LVU159
 616 0006 FFF7FEFF 		bl	SystemClock_Config
 617              	.LVL48:
 174:Core/Src/main.c ****   MX_USART2_UART_Init();
 618              		.loc 1 174 3 view .LVU160
 619 000a FFF7FEFF 		bl	MX_GPIO_Init
 620              	.LVL49:
 175:Core/Src/main.c ****   MX_CAN1_Init();
 621              		.loc 1 175 3 view .LVU161
 622 000e FFF7FEFF 		bl	MX_USART2_UART_Init
 623              	.LVL50:
 176:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 624              		.loc 1 176 3 view .LVU162
 625 0012 FFF7FEFF 		bl	MX_CAN1_Init
 626              	.LVL51:
 178:Core/Src/main.c ****   HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 627              		.loc 1 178 3 view .LVU163
 628 0016 074C     		ldr	r4, .L32
 629 0018 2046     		mov	r0, r4
 630 001a FFF7FEFF 		bl	HAL_CAN_Start
 631              	.LVL52:
 179:Core/Src/main.c **** 
 632              		.loc 1 179 3 view .LVU164
 633 001e 0221     		movs	r1, #2
 634 0020 2046     		mov	r0, r4
 635 0022 FFF7FEFF 		bl	HAL_CAN_ActivateNotification
 636              	.LVL53:
 187:Core/Src/main.c **** 
 637              		.loc 1 187 3 view .LVU165
 638 0026 1422     		movs	r2, #20
 639 0028 0349     		ldr	r1, .L32+4
 640 002a 0448     		ldr	r0, .L32+8
 641 002c FFF7FEFF 		bl	HAL_UARTEx_ReceiveToIdle_IT
 642              	.LVL54:
 643              	.L30:
ARM GAS  /tmp/ccgQh326.s 			page 35


 189:Core/Src/main.c ****   {
 644              		.loc 1 189 3 view .LVU166
 194:Core/Src/main.c ****   /* USER CODE END 3 */
 645              		.loc 1 194 3 view .LVU167
 189:Core/Src/main.c ****   {
 646              		.loc 1 189 9 view .LVU168
 647 0030 FEE7     		b	.L30
 648              	.L33:
 649 0032 00BF     		.align	2
 650              	.L32:
 651 0034 00000000 		.word	hcan1
 652 0038 00000000 		.word	serialBuffer
 653 003c 00000000 		.word	huart2
 654              		.cfi_endproc
 655              	.LFE139:
 657              		.global	RxData
 658              		.section	.bss.RxData,"aw",%nobits
 659              		.align	2
 662              	RxData:
 663 0000 00000000 		.space	8
 663      00000000 
 664              		.global	TxData
 665              		.section	.bss.TxData,"aw",%nobits
 666              		.align	2
 669              	TxData:
 670 0000 00000000 		.space	8
 670      00000000 
 671              		.global	TxMailBox
 672              		.section	.bss.TxMailBox,"aw",%nobits
 673              		.align	2
 676              	TxMailBox:
 677 0000 00000000 		.space	12
 677      00000000 
 677      00000000 
 678              		.global	RxHeader
 679              		.section	.bss.RxHeader,"aw",%nobits
 680              		.align	2
 683              	RxHeader:
 684 0000 00000000 		.space	28
 684      00000000 
 684      00000000 
 684      00000000 
 684      00000000 
 685              		.global	TxHeader
 686              		.section	.bss.TxHeader,"aw",%nobits
 687              		.align	2
 690              	TxHeader:
 691 0000 00000000 		.space	24
 691      00000000 
 691      00000000 
 691      00000000 
 691      00000000 
 692              		.global	serialBuffer
 693              		.section	.bss.serialBuffer,"aw",%nobits
 694              		.align	2
 697              	serialBuffer:
 698 0000 00000000 		.space	20
ARM GAS  /tmp/ccgQh326.s 			page 36


 698      00000000 
 698      00000000 
 698      00000000 
 698      00000000 
 699              		.text
 700              	.Letext0:
 701              		.file 3 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-n
 702              		.file 4 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-n
 703              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 704              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 705              		.file 7 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-n
 706              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 707              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 708              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 709              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 710              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 711              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_can.h"
 712              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 713              		.file 15 "Core/Inc/can.h"
 714              		.file 16 "Core/Inc/usart.h"
 715              		.file 17 "Core/Inc/gpio.h"
 716              		.file 18 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-
 717              		.file 19 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-
 718              		.file 20 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 719              		.file 21 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-
 720              		.file 22 "<built-in>"
ARM GAS  /tmp/ccgQh326.s 			page 37


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccgQh326.s:21     .rodata.HAL_CAN_RxFifo0MsgPendingCallback.str1.4:00000000 $d
     /tmp/ccgQh326.s:28     .text.HAL_CAN_RxFifo0MsgPendingCallback:00000000 $t
     /tmp/ccgQh326.s:34     .text.HAL_CAN_RxFifo0MsgPendingCallback:00000000 HAL_CAN_RxFifo0MsgPendingCallback
     /tmp/ccgQh326.s:182    .text.HAL_CAN_RxFifo0MsgPendingCallback:00000088 $d
     /tmp/ccgQh326.s:683    .bss.RxHeader:00000000 RxHeader
     /tmp/ccgQh326.s:662    .bss.RxData:00000000 RxData
     /tmp/ccgQh326.s:197    .text.HAL_UARTEx_RxEventCallback:00000000 $t
     /tmp/ccgQh326.s:203    .text.HAL_UARTEx_RxEventCallback:00000000 HAL_UARTEx_RxEventCallback
     /tmp/ccgQh326.s:387    .text.HAL_UARTEx_RxEventCallback:000000c8 $d
     /tmp/ccgQh326.s:697    .bss.serialBuffer:00000000 serialBuffer
     /tmp/ccgQh326.s:690    .bss.TxHeader:00000000 TxHeader
     /tmp/ccgQh326.s:669    .bss.TxData:00000000 TxData
     /tmp/ccgQh326.s:676    .bss.TxMailBox:00000000 TxMailBox
     /tmp/ccgQh326.s:399    .text.Error_Handler:00000000 $t
     /tmp/ccgQh326.s:405    .text.Error_Handler:00000000 Error_Handler
     /tmp/ccgQh326.s:437    .text.SystemClock_Config:00000000 $t
     /tmp/ccgQh326.s:443    .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/ccgQh326.s:589    .text.SystemClock_Config:000000a0 $d
     /tmp/ccgQh326.s:595    .text.main:00000000 $t
     /tmp/ccgQh326.s:601    .text.main:00000000 main
     /tmp/ccgQh326.s:651    .text.main:00000034 $d
     /tmp/ccgQh326.s:659    .bss.RxData:00000000 $d
     /tmp/ccgQh326.s:666    .bss.TxData:00000000 $d
     /tmp/ccgQh326.s:673    .bss.TxMailBox:00000000 $d
     /tmp/ccgQh326.s:680    .bss.RxHeader:00000000 $d
     /tmp/ccgQh326.s:687    .bss.TxHeader:00000000 $d
     /tmp/ccgQh326.s:694    .bss.serialBuffer:00000000 $d

UNDEFINED SYMBOLS
HAL_CAN_GetRxMessage
sprintf
strlen
HAL_UART_Transmit
HAL_GPIO_WritePin
huart2
__aeabi_i2d
__aeabi_dmul
__aeabi_ui2d
__aeabi_dadd
__aeabi_d2uiz
pow
HAL_CAN_AddTxMessage
HAL_UARTEx_ReceiveToIdle_IT
hcan1
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
MX_GPIO_Init
MX_USART2_UART_Init
MX_CAN1_Init
HAL_CAN_Start
HAL_CAN_ActivateNotification
