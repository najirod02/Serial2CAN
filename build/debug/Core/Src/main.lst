ARM GAS  /tmp/ccVBnhdn.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.section	.rodata.HAL_CAN_RxFifo0MsgPendingCallback.str1.4,"aMS",%progbits,1
  21              		.align	2
  22              	.LC0:
  23 0000 25632530 		.ascii	"%c%03lX%lu\000"
  23      336C5825 
  23      6C7500
  24 000b 00       		.align	2
  25              	.LC1:
  26 000c 25303258 		.ascii	"%02X\000"
  26      00
  27 0011 000000   		.align	2
  28              	.LC2:
  29 0014 0D00     		.ascii	"\015\000"
  30              		.section	.text.HAL_CAN_RxFifo0MsgPendingCallback,"ax",%progbits
  31              		.align	1
  32              		.global	HAL_CAN_RxFifo0MsgPendingCallback
  33              		.syntax unified
  34              		.thumb
  35              		.thumb_func
  37              	HAL_CAN_RxFifo0MsgPendingCallback:
  38              	.LVL0:
  39              	.LFB137:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
ARM GAS  /tmp/ccVBnhdn.s 			page 2


  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include "can.h"
  22:Core/Src/main.c **** #include "usart.h"
  23:Core/Src/main.c **** #include "gpio.h"
  24:Core/Src/main.c **** 
  25:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  26:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  27:Core/Src/main.c **** #include "string.h"
  28:Core/Src/main.c **** #include "stdio.h"
  29:Core/Src/main.c **** #include "stdlib.h"
  30:Core/Src/main.c **** #include "math.h"
  31:Core/Src/main.c **** /* USER CODE END Includes */
  32:Core/Src/main.c **** 
  33:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  34:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  35:Core/Src/main.c **** 
  36:Core/Src/main.c **** /* USER CODE END PTD */
  37:Core/Src/main.c **** 
  38:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  39:Core/Src/main.c **** /* USER CODE BEGIN PD */
  40:Core/Src/main.c **** #define BUFFER_SIZE 25
  41:Core/Src/main.c **** /* USER CODE END PD */
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  44:Core/Src/main.c **** /* USER CODE BEGIN PM */
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** /* USER CODE END PM */
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** /* USER CODE BEGIN PV */
  51:Core/Src/main.c **** char serialBuffer[BUFFER_SIZE];
  52:Core/Src/main.c **** /* USER CODE END PV */
  53:Core/Src/main.c **** 
  54:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  55:Core/Src/main.c **** void SystemClock_Config(void);
  56:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  57:Core/Src/main.c **** 
  58:Core/Src/main.c **** /* USER CODE END PFP */
  59:Core/Src/main.c **** 
  60:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  61:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  62:Core/Src/main.c **** CAN_TxHeaderTypeDef TxHeader;
  63:Core/Src/main.c **** CAN_RxHeaderTypeDef RxHeader;
  64:Core/Src/main.c **** 
  65:Core/Src/main.c **** //available only 3 mailboxes, the hw will automatically decide which
  66:Core/Src/main.c **** //to forward the frame
  67:Core/Src/main.c **** uint32_t TxMailBox[3];
  68:Core/Src/main.c **** 
  69:Core/Src/main.c **** //both to contain the maximum payload for both standard and extended frame
  70:Core/Src/main.c **** uint8_t TxData[8];
  71:Core/Src/main.c **** uint8_t RxData[8];
  72:Core/Src/main.c **** 
  73:Core/Src/main.c **** /**
ARM GAS  /tmp/ccVBnhdn.s 			page 3


  74:Core/Src/main.c ****  * when we have pending messages, read them, construct a string
  75:Core/Src/main.c ****  * to send back to uart to host pc.
  76:Core/Src/main.c ****  * 
  77:Core/Src/main.c ****  * in order to create a compliant slcand frame we have the following format:
  78:Core/Src/main.c ****  * <type><id><dlc><data>
  79:Core/Src/main.c ****  * 
  80:Core/Src/main.c ****  */
  81:Core/Src/main.c **** void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
  40              		.loc 1 81 64 view -0
  41              		.cfi_startproc
  42              		@ args = 0, pretend = 0, frame = 32
  43              		@ frame_needed = 0, uses_anonymous_args = 0
  44              		.loc 1 81 64 is_stmt 0 view .LVU1
  45 0000 30B5     		push	{r4, r5, lr}
  46              		.cfi_def_cfa_offset 12
  47              		.cfi_offset 4, -12
  48              		.cfi_offset 5, -8
  49              		.cfi_offset 14, -4
  50 0002 8BB0     		sub	sp, sp, #44
  51              		.cfi_def_cfa_offset 56
  82:Core/Src/main.c **** 
  83:Core/Src/main.c ****   HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
  52              		.loc 1 83 3 is_stmt 1 view .LVU2
  53 0004 244C     		ldr	r4, .L7
  54 0006 254B     		ldr	r3, .L7+4
  55 0008 2246     		mov	r2, r4
  56 000a 0021     		movs	r1, #0
  57 000c FFF7FEFF 		bl	HAL_CAN_GetRxMessage
  58              	.LVL1:
  84:Core/Src/main.c ****   
  85:Core/Src/main.c ****   //copy Id and DLC in buffer
  86:Core/Src/main.c ****   char can2Uart[BUFFER_SIZE] = {0};
  59              		.loc 1 86 3 view .LVU3
  60              		.loc 1 86 8 is_stmt 0 view .LVU4
  61 0010 0023     		movs	r3, #0
  62 0012 0393     		str	r3, [sp, #12]
  63 0014 0493     		str	r3, [sp, #16]
  64 0016 0593     		str	r3, [sp, #20]
  65 0018 0693     		str	r3, [sp, #24]
  66 001a 0793     		str	r3, [sp, #28]
  67 001c 0893     		str	r3, [sp, #32]
  68 001e 8DF82430 		strb	r3, [sp, #36]
  87:Core/Src/main.c ****   char typeFrame = (RxHeader.RTR == CAN_RTR_DATA) ? 't' : 'r';
  69              		.loc 1 87 3 is_stmt 1 view .LVU5
  70              		.loc 1 87 29 is_stmt 0 view .LVU6
  71 0022 E368     		ldr	r3, [r4, #12]
  72              		.loc 1 87 8 view .LVU7
  73 0024 7BB9     		cbnz	r3, .L5
  74              		.loc 1 87 8 discriminator 1 view .LVU8
  75 0026 7422     		movs	r2, #116
  76              	.L2:
  77              	.LVL2:
  88:Core/Src/main.c ****   sprintf(can2Uart, "%c%03lX%lu", typeFrame, RxHeader.StdId, RxHeader.DLC);
  78              		.loc 1 88 3 is_stmt 1 view .LVU9
  79 0028 1B4B     		ldr	r3, .L7
  80 002a 1969     		ldr	r1, [r3, #16]
  81 002c 0091     		str	r1, [sp]
ARM GAS  /tmp/ccVBnhdn.s 			page 4


  82 002e 1B68     		ldr	r3, [r3]
  83 0030 1B49     		ldr	r1, .L7+8
  84 0032 03A8     		add	r0, sp, #12
  85 0034 FFF7FEFF 		bl	sprintf
  86              	.LVL3:
  89:Core/Src/main.c **** 
  90:Core/Src/main.c ****   //convertion of bytes into hex characters
  91:Core/Src/main.c ****   //1 byte = 2 hex values
  92:Core/Src/main.c ****   char *offset = can2Uart + strlen(can2Uart);
  87              		.loc 1 92 3 view .LVU10
  88              		.loc 1 92 29 is_stmt 0 view .LVU11
  89 0038 03A8     		add	r0, sp, #12
  90 003a FFF7FEFF 		bl	strlen
  91              	.LVL4:
  92              		.loc 1 92 9 discriminator 1 view .LVU12
  93 003e 03AB     		add	r3, sp, #12
  94 0040 1D18     		adds	r5, r3, r0
  95              	.LVL5:
  93:Core/Src/main.c ****   for (uint8_t i = 0; i < RxHeader.DLC; i++) {
  96              		.loc 1 93 3 is_stmt 1 view .LVU13
  97              	.LBB4:
  98              		.loc 1 93 8 view .LVU14
  99              		.loc 1 93 16 is_stmt 0 view .LVU15
 100 0042 0024     		movs	r4, #0
 101              		.loc 1 93 3 view .LVU16
 102 0044 0AE0     		b	.L3
 103              	.LVL6:
 104              	.L5:
 105              		.loc 1 93 3 view .LVU17
 106              	.LBE4:
  87:Core/Src/main.c ****   sprintf(can2Uart, "%c%03lX%lu", typeFrame, RxHeader.StdId, RxHeader.DLC);
 107              		.loc 1 87 8 discriminator 2 view .LVU18
 108 0046 7222     		movs	r2, #114
 109 0048 EEE7     		b	.L2
 110              	.LVL7:
 111              	.L4:
 112              	.LBB5:
  94:Core/Src/main.c ****       sprintf(offset, "%02X", RxData[i]);
 113              		.loc 1 94 7 is_stmt 1 view .LVU19
 114 004a 144B     		ldr	r3, .L7+4
 115 004c 1A5D     		ldrb	r2, [r3, r4]	@ zero_extendqisi2
 116 004e 1549     		ldr	r1, .L7+12
 117 0050 2846     		mov	r0, r5
 118 0052 FFF7FEFF 		bl	sprintf
 119              	.LVL8:
  95:Core/Src/main.c ****       offset += 2;
 120              		.loc 1 95 7 view .LVU20
 121              		.loc 1 95 14 is_stmt 0 view .LVU21
 122 0056 0235     		adds	r5, r5, #2
 123              	.LVL9:
  93:Core/Src/main.c ****       sprintf(offset, "%02X", RxData[i]);
 124              		.loc 1 93 42 is_stmt 1 discriminator 3 view .LVU22
 125 0058 0134     		adds	r4, r4, #1
 126              	.LVL10:
  93:Core/Src/main.c ****       sprintf(offset, "%02X", RxData[i]);
 127              		.loc 1 93 42 is_stmt 0 discriminator 3 view .LVU23
 128 005a E4B2     		uxtb	r4, r4
ARM GAS  /tmp/ccVBnhdn.s 			page 5


 129              	.LVL11:
 130              	.L3:
  93:Core/Src/main.c ****       sprintf(offset, "%02X", RxData[i]);
 131              		.loc 1 93 25 is_stmt 1 discriminator 1 view .LVU24
  93:Core/Src/main.c ****       sprintf(offset, "%02X", RxData[i]);
 132              		.loc 1 93 35 is_stmt 0 discriminator 1 view .LVU25
 133 005c 0E4B     		ldr	r3, .L7
 134 005e 1B69     		ldr	r3, [r3, #16]
  93:Core/Src/main.c ****       sprintf(offset, "%02X", RxData[i]);
 135              		.loc 1 93 25 discriminator 1 view .LVU26
 136 0060 9C42     		cmp	r4, r3
 137 0062 F2D3     		bcc	.L4
  93:Core/Src/main.c ****       sprintf(offset, "%02X", RxData[i]);
 138              		.loc 1 93 25 discriminator 1 view .LVU27
 139              	.LBE5:
  96:Core/Src/main.c ****   }
  97:Core/Src/main.c ****   strcat(can2Uart, "\r");
 140              		.loc 1 97 3 is_stmt 1 view .LVU28
 141 0064 03AC     		add	r4, sp, #12
 142              	.LVL12:
 143              		.loc 1 97 3 is_stmt 0 view .LVU29
 144 0066 2046     		mov	r0, r4
 145 0068 FFF7FEFF 		bl	strlen
 146              	.LVL13:
 147              		.loc 1 97 3 discriminator 1 view .LVU30
 148 006c 0E4B     		ldr	r3, .L7+16
 149 006e 1B88     		ldrh	r3, [r3]	@ unaligned
 150 0070 2352     		strh	r3, [r4, r0]	@ unaligned
  98:Core/Src/main.c **** 
  99:Core/Src/main.c ****   //an example of what should look like the final string
 100:Core/Src/main.c ****   //"t4563112233\r";// can_id 0x456, len 3, data 0x11 0x22 0x33
 101:Core/Src/main.c **** 
 102:Core/Src/main.c ****   HAL_UART_Transmit_IT(&huart2, (uint8_t *) can2Uart, strlen(can2Uart));
 151              		.loc 1 102 3 is_stmt 1 view .LVU31
 152              		.loc 1 102 55 is_stmt 0 view .LVU32
 153 0072 2046     		mov	r0, r4
 154 0074 FFF7FEFF 		bl	strlen
 155              	.LVL14:
 156              		.loc 1 102 3 discriminator 1 view .LVU33
 157 0078 82B2     		uxth	r2, r0
 158 007a 2146     		mov	r1, r4
 159 007c 0B48     		ldr	r0, .L7+20
 160 007e FFF7FEFF 		bl	HAL_UART_Transmit_IT
 161              	.LVL15:
 103:Core/Src/main.c ****   memset(serialBuffer, 0, BUFFER_SIZE);//clear buffer
 162              		.loc 1 103 3 is_stmt 1 view .LVU34
 163 0082 0B4B     		ldr	r3, .L7+24
 164 0084 0022     		movs	r2, #0
 165 0086 1A60     		str	r2, [r3]
 166 0088 5A60     		str	r2, [r3, #4]
 167 008a 9A60     		str	r2, [r3, #8]
 168 008c DA60     		str	r2, [r3, #12]
 169 008e 1A61     		str	r2, [r3, #16]
 170 0090 5A61     		str	r2, [r3, #20]
 171 0092 1A76     		strb	r2, [r3, #24]
 104:Core/Src/main.c **** }
 172              		.loc 1 104 1 is_stmt 0 view .LVU35
ARM GAS  /tmp/ccVBnhdn.s 			page 6


 173 0094 0BB0     		add	sp, sp, #44
 174              		.cfi_def_cfa_offset 12
 175              		@ sp needed
 176 0096 30BD     		pop	{r4, r5, pc}
 177              	.LVL16:
 178              	.L8:
 179              		.loc 1 104 1 view .LVU36
 180              		.align	2
 181              	.L7:
 182 0098 00000000 		.word	RxHeader
 183 009c 00000000 		.word	RxData
 184 00a0 00000000 		.word	.LC0
 185 00a4 0C000000 		.word	.LC1
 186 00a8 14000000 		.word	.LC2
 187 00ac 00000000 		.word	huart2
 188 00b0 00000000 		.word	serialBuffer
 189              		.cfi_endproc
 190              	.LFE137:
 192              		.section	.text.HAL_UARTEx_RxEventCallback,"ax",%progbits
 193              		.align	1
 194              		.global	HAL_UARTEx_RxEventCallback
 195              		.syntax unified
 196              		.thumb
 197              		.thumb_func
 199              	HAL_UARTEx_RxEventCallback:
 200              	.LVL17:
 201              	.LFB138:
 105:Core/Src/main.c **** 
 106:Core/Src/main.c **** /**
 107:Core/Src/main.c ****  * when a can frame message is received from the serial, create a new frame to send
 108:Core/Src/main.c ****  * through the "real" can interface.
 109:Core/Src/main.c ****  * 
 110:Core/Src/main.c ****  * the frame created assumes a standard frame
 111:Core/Src/main.c ****  */
 112:Core/Src/main.c **** void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
 113:Core/Src/main.c **** {
 202              		.loc 1 113 1 is_stmt 1 view -0
 203              		.cfi_startproc
 204              		@ args = 0, pretend = 0, frame = 8
 205              		@ frame_needed = 0, uses_anonymous_args = 0
 206              		.loc 1 113 1 is_stmt 0 view .LVU38
 207 0000 30B5     		push	{r4, r5, lr}
 208              		.cfi_def_cfa_offset 12
 209              		.cfi_offset 4, -12
 210              		.cfi_offset 5, -8
 211              		.cfi_offset 14, -4
 212 0002 83B0     		sub	sp, sp, #12
 213              		.cfi_def_cfa_offset 24
 114:Core/Src/main.c ****   //extended frames are dropped as they are not used
 115:Core/Src/main.c ****   //or any not recognized frame type
 116:Core/Src/main.c ****   if(serialBuffer[0] != 't' && serialBuffer[0] != 'r'){ 
 214              		.loc 1 116 3 is_stmt 1 view .LVU39
 215              		.loc 1 116 18 is_stmt 0 view .LVU40
 216 0004 3E4B     		ldr	r3, .L25
 217 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 218              		.loc 1 116 5 view .LVU41
 219 0008 742B     		cmp	r3, #116
ARM GAS  /tmp/ccVBnhdn.s 			page 7


 220 000a 01D0     		beq	.L10
 221              		.loc 1 116 29 discriminator 1 view .LVU42
 222 000c 722B     		cmp	r3, #114
 223 000e 29D1     		bne	.L23
 224              	.L10:
 117:Core/Src/main.c ****     memset(serialBuffer, 0, BUFFER_SIZE);
 118:Core/Src/main.c ****     HAL_UARTEx_ReceiveToIdle_IT(&huart2, (uint8_t *)serialBuffer, BUFFER_SIZE);
 119:Core/Src/main.c ****     return;
 120:Core/Src/main.c ****   }
 121:Core/Src/main.c **** 
 122:Core/Src/main.c ****   //create the can frame and send it to a mailbox
 123:Core/Src/main.c ****   char id[4] = {0};
 225              		.loc 1 123 3 is_stmt 1 view .LVU43
 226              		.loc 1 123 8 is_stmt 0 view .LVU44
 227 0010 0024     		movs	r4, #0
 228 0012 0194     		str	r4, [sp, #4]
 124:Core/Src/main.c ****   strncpy(id, &serialBuffer[1], 3);//assuming standard id
 229              		.loc 1 124 3 is_stmt 1 view .LVU45
 230 0014 3B4D     		ldr	r5, .L25+4
 231 0016 0322     		movs	r2, #3
 232 0018 2946     		mov	r1, r5
 233              	.LVL18:
 234              		.loc 1 124 3 is_stmt 0 view .LVU46
 235 001a 01A8     		add	r0, sp, #4
 236              	.LVL19:
 237              		.loc 1 124 3 view .LVU47
 238 001c FFF7FEFF 		bl	strncpy
 239              	.LVL20:
 125:Core/Src/main.c ****   TxHeader.StdId = (uint32_t)strtol(id, NULL, 16);
 240              		.loc 1 125 3 is_stmt 1 view .LVU48
 241              		.loc 1 125 30 is_stmt 0 view .LVU49
 242 0020 1022     		movs	r2, #16
 243 0022 2146     		mov	r1, r4
 244 0024 01A8     		add	r0, sp, #4
 245 0026 FFF7FEFF 		bl	strtol
 246              	.LVL21:
 247              		.loc 1 125 18 discriminator 1 view .LVU50
 248 002a 374B     		ldr	r3, .L25+8
 249 002c 1860     		str	r0, [r3]
 126:Core/Src/main.c **** 
 127:Core/Src/main.c ****   TxHeader.ExtId = 0; //not using extended ID
 250              		.loc 1 127 3 is_stmt 1 view .LVU51
 251              		.loc 1 127 18 is_stmt 0 view .LVU52
 252 002e 5C60     		str	r4, [r3, #4]
 128:Core/Src/main.c ****   TxHeader.IDE = CAN_ID_STD; //standard ID
 253              		.loc 1 128 3 is_stmt 1 view .LVU53
 254              		.loc 1 128 16 is_stmt 0 view .LVU54
 255 0030 9C60     		str	r4, [r3, #8]
 129:Core/Src/main.c **** 
 130:Core/Src/main.c ****   TxHeader.RTR = (serialBuffer[0] == 't') ? 
 256              		.loc 1 130 3 is_stmt 1 view .LVU55
 257              		.loc 1 130 31 is_stmt 0 view .LVU56
 258 0032 15F8013C 		ldrb	r3, [r5, #-1]	@ zero_extendqisi2
 131:Core/Src/main.c ****                   CAN_RTR_DATA : CAN_RTR_REMOTE; //data frame
 259              		.loc 1 131 32 view .LVU57
 260 0036 742B     		cmp	r3, #116
 261 0038 00D0     		beq	.L12
ARM GAS  /tmp/ccVBnhdn.s 			page 8


 262              		.loc 1 131 32 discriminator 2 view .LVU58
 263 003a 0224     		movs	r4, #2
 264              	.L12:
 130:Core/Src/main.c ****                   CAN_RTR_DATA : CAN_RTR_REMOTE; //data frame
 265              		.loc 1 130 16 view .LVU59
 266 003c 324B     		ldr	r3, .L25+8
 267 003e DC60     		str	r4, [r3, #12]
 132:Core/Src/main.c ****   
 133:Core/Src/main.c ****   TxHeader.TransmitGlobalTime = DISABLE;
 268              		.loc 1 133 3 is_stmt 1 view .LVU60
 269              		.loc 1 133 31 is_stmt 0 view .LVU61
 270 0040 0022     		movs	r2, #0
 271 0042 1A75     		strb	r2, [r3, #20]
 134:Core/Src/main.c **** 
 135:Core/Src/main.c ****   //collect payload to send skipping # char
 136:Core/Src/main.c ****   uint8_t payload_length = (strlen(serialBuffer) - 5) / 2; //each byte = 2 hex chars
 272              		.loc 1 136 3 is_stmt 1 view .LVU62
 273              		.loc 1 136 29 is_stmt 0 view .LVU63
 274 0044 2E48     		ldr	r0, .L25
 275 0046 FFF7FEFF 		bl	strlen
 276              	.LVL22:
 277              		.loc 1 136 50 discriminator 1 view .LVU64
 278 004a 0538     		subs	r0, r0, #5
 279              		.loc 1 136 55 discriminator 1 view .LVU65
 280 004c 4508     		lsrs	r5, r0, #1
 281              		.loc 1 136 11 discriminator 1 view .LVU66
 282 004e C0F34700 		ubfx	r0, r0, #1, #8
 283              	.LVL23:
 137:Core/Src/main.c ****   if (payload_length > 8) {
 284              		.loc 1 137 3 is_stmt 1 view .LVU67
 285              		.loc 1 137 6 is_stmt 0 view .LVU68
 286 0052 0828     		cmp	r0, #8
 287 0054 14D8     		bhi	.L24
 138:Core/Src/main.c ****       //payload too large for standard can frame
 139:Core/Src/main.c ****       //drop message and abort sending can
 140:Core/Src/main.c ****       //for example, 123#001122334455667788 is dropped
 141:Core/Src/main.c ****       memset(serialBuffer, 0, BUFFER_SIZE);
 142:Core/Src/main.c ****       HAL_UARTEx_ReceiveToIdle_IT(&huart2, (uint8_t *)serialBuffer, BUFFER_SIZE);
 143:Core/Src/main.c ****       return;
 144:Core/Src/main.c ****   }
 145:Core/Src/main.c **** 
 146:Core/Src/main.c ****   if(TxHeader.RTR == CAN_RTR_DATA){
 288              		.loc 1 146 3 is_stmt 1 view .LVU69
 289              		.loc 1 146 5 is_stmt 0 view .LVU70
 290 0056 002C     		cmp	r4, #0
 291 0058 4FD0     		beq	.L20
 147:Core/Src/main.c ****     for (int i = 0; i < payload_length; i++) {
 148:Core/Src/main.c ****       //create pair of hex chars
 149:Core/Src/main.c ****       char hex_byte[3] = {serialBuffer[5 + 2 * i], serialBuffer[5 + 2 * i + 1], '\0'};
 150:Core/Src/main.c ****       TxData[i] = (uint8_t)strtol(hex_byte, NULL, 16);//convert each hex pair to uint8_t
 151:Core/Src/main.c ****     }
 152:Core/Src/main.c ****     TxHeader.DLC = payload_length;
 153:Core/Src/main.c ****   } else {
 154:Core/Src/main.c ****     //remote request, no payload defined
 155:Core/Src/main.c ****     TxHeader.DLC = (uint32_t)serialBuffer[4];
 292              		.loc 1 155 5 is_stmt 1 view .LVU71
 293              		.loc 1 155 42 is_stmt 0 view .LVU72
ARM GAS  /tmp/ccVBnhdn.s 			page 9


 294 005a 294B     		ldr	r3, .L25
 295 005c 1A79     		ldrb	r2, [r3, #4]	@ zero_extendqisi2
 296              		.loc 1 155 18 view .LVU73
 297 005e 2A4B     		ldr	r3, .L25+8
 298 0060 1A61     		str	r2, [r3, #16]
 299 0062 35E0     		b	.L17
 300              	.LVL24:
 301              	.L23:
 117:Core/Src/main.c ****     HAL_UARTEx_ReceiveToIdle_IT(&huart2, (uint8_t *)serialBuffer, BUFFER_SIZE);
 302              		.loc 1 117 5 is_stmt 1 view .LVU74
 303 0064 2649     		ldr	r1, .L25
 304              	.LVL25:
 117:Core/Src/main.c ****     HAL_UARTEx_ReceiveToIdle_IT(&huart2, (uint8_t *)serialBuffer, BUFFER_SIZE);
 305              		.loc 1 117 5 is_stmt 0 view .LVU75
 306 0066 0023     		movs	r3, #0
 307 0068 0B60     		str	r3, [r1]
 308 006a 4B60     		str	r3, [r1, #4]
 309 006c 8B60     		str	r3, [r1, #8]
 310 006e CB60     		str	r3, [r1, #12]
 311 0070 0B61     		str	r3, [r1, #16]
 312 0072 4B61     		str	r3, [r1, #20]
 313 0074 0B76     		strb	r3, [r1, #24]
 118:Core/Src/main.c ****     return;
 314              		.loc 1 118 5 is_stmt 1 view .LVU76
 315 0076 1922     		movs	r2, #25
 316 0078 2448     		ldr	r0, .L25+12
 317              	.LVL26:
 118:Core/Src/main.c ****     return;
 318              		.loc 1 118 5 is_stmt 0 view .LVU77
 319 007a FFF7FEFF 		bl	HAL_UARTEx_ReceiveToIdle_IT
 320              	.LVL27:
 119:Core/Src/main.c ****   }
 321              		.loc 1 119 5 is_stmt 1 view .LVU78
 322 007e 3AE0     		b	.L9
 323              	.LVL28:
 324              	.L24:
 141:Core/Src/main.c ****       HAL_UARTEx_ReceiveToIdle_IT(&huart2, (uint8_t *)serialBuffer, BUFFER_SIZE);
 325              		.loc 1 141 7 view .LVU79
 326 0080 1F49     		ldr	r1, .L25
 327 0082 0023     		movs	r3, #0
 328 0084 0B60     		str	r3, [r1]
 329 0086 4B60     		str	r3, [r1, #4]
 330 0088 8B60     		str	r3, [r1, #8]
 331 008a CB60     		str	r3, [r1, #12]
 332 008c 0B61     		str	r3, [r1, #16]
 333 008e 4B61     		str	r3, [r1, #20]
 334 0090 0B76     		strb	r3, [r1, #24]
 142:Core/Src/main.c ****       return;
 335              		.loc 1 142 7 view .LVU80
 336 0092 1922     		movs	r2, #25
 337 0094 1D48     		ldr	r0, .L25+12
 338              	.LVL29:
 142:Core/Src/main.c ****       return;
 339              		.loc 1 142 7 is_stmt 0 view .LVU81
 340 0096 FFF7FEFF 		bl	HAL_UARTEx_ReceiveToIdle_IT
 341              	.LVL30:
 143:Core/Src/main.c ****   }
ARM GAS  /tmp/ccVBnhdn.s 			page 10


 342              		.loc 1 143 7 is_stmt 1 view .LVU82
 343 009a 2CE0     		b	.L9
 344              	.LVL31:
 345              	.L16:
 346              	.LBB6:
 347              	.LBB7:
 149:Core/Src/main.c ****       TxData[i] = (uint8_t)strtol(hex_byte, NULL, 16);//convert each hex pair to uint8_t
 348              		.loc 1 149 7 view .LVU83
 149:Core/Src/main.c ****       TxData[i] = (uint8_t)strtol(hex_byte, NULL, 16);//convert each hex pair to uint8_t
 349              		.loc 1 149 46 is_stmt 0 view .LVU84
 350 009c 6300     		lsls	r3, r4, #1
 149:Core/Src/main.c ****       TxData[i] = (uint8_t)strtol(hex_byte, NULL, 16);//convert each hex pair to uint8_t
 351              		.loc 1 149 42 view .LVU85
 352 009e 0533     		adds	r3, r3, #5
 149:Core/Src/main.c ****       TxData[i] = (uint8_t)strtol(hex_byte, NULL, 16);//convert each hex pair to uint8_t
 353              		.loc 1 149 39 view .LVU86
 354 00a0 174A     		ldr	r2, .L25
 355 00a2 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 149:Core/Src/main.c ****       TxData[i] = (uint8_t)strtol(hex_byte, NULL, 16);//convert each hex pair to uint8_t
 356              		.loc 1 149 12 view .LVU87
 357 00a4 8DF80030 		strb	r3, [sp]
 149:Core/Src/main.c ****       TxData[i] = (uint8_t)strtol(hex_byte, NULL, 16);//convert each hex pair to uint8_t
 358              		.loc 1 149 75 view .LVU88
 359 00a8 E31C     		adds	r3, r4, #3
 149:Core/Src/main.c ****       TxData[i] = (uint8_t)strtol(hex_byte, NULL, 16);//convert each hex pair to uint8_t
 360              		.loc 1 149 64 view .LVU89
 361 00aa 12F81330 		ldrb	r3, [r2, r3, lsl #1]	@ zero_extendqisi2
 149:Core/Src/main.c ****       TxData[i] = (uint8_t)strtol(hex_byte, NULL, 16);//convert each hex pair to uint8_t
 362              		.loc 1 149 12 view .LVU90
 363 00ae 8DF80130 		strb	r3, [sp, #1]
 364 00b2 0021     		movs	r1, #0
 365 00b4 8DF80210 		strb	r1, [sp, #2]
 150:Core/Src/main.c ****     }
 366              		.loc 1 150 7 is_stmt 1 view .LVU91
 150:Core/Src/main.c ****     }
 367              		.loc 1 150 28 is_stmt 0 view .LVU92
 368 00b8 1022     		movs	r2, #16
 369 00ba 6846     		mov	r0, sp
 370 00bc FFF7FEFF 		bl	strtol
 371              	.LVL32:
 150:Core/Src/main.c ****     }
 372              		.loc 1 150 17 discriminator 1 view .LVU93
 373 00c0 134B     		ldr	r3, .L25+16
 374 00c2 1855     		strb	r0, [r3, r4]
 375              	.LBE7:
 147:Core/Src/main.c ****       //create pair of hex chars
 376              		.loc 1 147 42 is_stmt 1 discriminator 3 view .LVU94
 377 00c4 0134     		adds	r4, r4, #1
 378              	.LVL33:
 379              	.L14:
 147:Core/Src/main.c ****       //create pair of hex chars
 380              		.loc 1 147 23 discriminator 1 view .LVU95
 381 00c6 EBB2     		uxtb	r3, r5
 382 00c8 A342     		cmp	r3, r4
 383 00ca E7DC     		bgt	.L16
 384              	.LBE6:
 152:Core/Src/main.c ****   } else {
ARM GAS  /tmp/ccVBnhdn.s 			page 11


 385              		.loc 1 152 5 view .LVU96
 152:Core/Src/main.c ****   } else {
 386              		.loc 1 152 18 is_stmt 0 view .LVU97
 387 00cc 0E4A     		ldr	r2, .L25+8
 388 00ce 1361     		str	r3, [r2, #16]
 389              	.LVL34:
 390              	.L17:
 156:Core/Src/main.c ****   }
 157:Core/Src/main.c **** 
 158:Core/Src/main.c ****   HAL_CAN_AddTxMessage(&hcan1, &TxHeader, &TxData[0], &TxMailBox[0]);
 391              		.loc 1 158 3 is_stmt 1 view .LVU98
 392 00d0 104B     		ldr	r3, .L25+20
 393 00d2 0F4A     		ldr	r2, .L25+16
 394 00d4 0C49     		ldr	r1, .L25+8
 395 00d6 1048     		ldr	r0, .L25+24
 396 00d8 FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 397              	.LVL35:
 159:Core/Src/main.c **** 
 160:Core/Src/main.c ****   //remain in listening for a new cansend frame
 161:Core/Src/main.c ****   memset(serialBuffer, 0, BUFFER_SIZE);
 398              		.loc 1 161 3 view .LVU99
 399 00dc 0849     		ldr	r1, .L25
 400 00de 0023     		movs	r3, #0
 401 00e0 0B60     		str	r3, [r1]
 402 00e2 4B60     		str	r3, [r1, #4]
 403 00e4 8B60     		str	r3, [r1, #8]
 404 00e6 CB60     		str	r3, [r1, #12]
 405 00e8 0B61     		str	r3, [r1, #16]
 406 00ea 4B61     		str	r3, [r1, #20]
 407 00ec 0B76     		strb	r3, [r1, #24]
 162:Core/Src/main.c ****   HAL_UARTEx_ReceiveToIdle_IT(&huart2, (uint8_t *)serialBuffer, BUFFER_SIZE);
 408              		.loc 1 162 3 view .LVU100
 409 00ee 1922     		movs	r2, #25
 410 00f0 0648     		ldr	r0, .L25+12
 411 00f2 FFF7FEFF 		bl	HAL_UARTEx_ReceiveToIdle_IT
 412              	.LVL36:
 413              	.L9:
 163:Core/Src/main.c **** }
 414              		.loc 1 163 1 is_stmt 0 view .LVU101
 415 00f6 03B0     		add	sp, sp, #12
 416              		.cfi_remember_state
 417              		.cfi_def_cfa_offset 12
 418              		@ sp needed
 419 00f8 30BD     		pop	{r4, r5, pc}
 420              	.LVL37:
 421              	.L20:
 422              		.cfi_restore_state
 423              	.LBB8:
 147:Core/Src/main.c ****       //create pair of hex chars
 424              		.loc 1 147 14 view .LVU102
 425 00fa 0024     		movs	r4, #0
 426 00fc E3E7     		b	.L14
 427              	.L26:
 428 00fe 00BF     		.align	2
 429              	.L25:
 430 0100 00000000 		.word	serialBuffer
 431 0104 01000000 		.word	serialBuffer+1
ARM GAS  /tmp/ccVBnhdn.s 			page 12


 432 0108 00000000 		.word	TxHeader
 433 010c 00000000 		.word	huart2
 434 0110 00000000 		.word	TxData
 435 0114 00000000 		.word	TxMailBox
 436 0118 00000000 		.word	hcan1
 437              	.LBE8:
 438              		.cfi_endproc
 439              	.LFE138:
 441              		.section	.text.Error_Handler,"ax",%progbits
 442              		.align	1
 443              		.global	Error_Handler
 444              		.syntax unified
 445              		.thumb
 446              		.thumb_func
 448              	Error_Handler:
 449              	.LFB141:
 164:Core/Src/main.c **** 
 165:Core/Src/main.c **** /* USER CODE END 0 */
 166:Core/Src/main.c **** 
 167:Core/Src/main.c **** /**
 168:Core/Src/main.c ****   * @brief  The application entry point.
 169:Core/Src/main.c ****   * @retval int
 170:Core/Src/main.c ****   */
 171:Core/Src/main.c **** int main(void)
 172:Core/Src/main.c **** {
 173:Core/Src/main.c **** 
 174:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 175:Core/Src/main.c ****   /* USER CODE END 1 */
 176:Core/Src/main.c **** 
 177:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 178:Core/Src/main.c **** 
 179:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 180:Core/Src/main.c ****   HAL_Init();
 181:Core/Src/main.c **** 
 182:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 183:Core/Src/main.c **** 
 184:Core/Src/main.c ****   /* USER CODE END Init */
 185:Core/Src/main.c **** 
 186:Core/Src/main.c ****   /* Configure the system clock */
 187:Core/Src/main.c ****   SystemClock_Config();
 188:Core/Src/main.c **** 
 189:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 190:Core/Src/main.c **** 
 191:Core/Src/main.c ****   /* USER CODE END SysInit */
 192:Core/Src/main.c **** 
 193:Core/Src/main.c ****   /* Initialize all configured peripherals */
 194:Core/Src/main.c ****   MX_GPIO_Init();
 195:Core/Src/main.c ****   MX_USART2_UART_Init();
 196:Core/Src/main.c ****   MX_CAN1_Init();
 197:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 198:Core/Src/main.c ****   HAL_CAN_Start(&hcan1);
 199:Core/Src/main.c ****   HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 200:Core/Src/main.c **** 
 201:Core/Src/main.c ****   /* USER CODE END 2 */
 202:Core/Src/main.c **** 
 203:Core/Src/main.c ****   /* Infinite loop */
 204:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
ARM GAS  /tmp/ccVBnhdn.s 			page 13


 205:Core/Src/main.c **** 
 206:Core/Src/main.c ****   //remain in listening for a cansend frame
 207:Core/Src/main.c ****   HAL_UARTEx_ReceiveToIdle_IT(&huart2, (uint8_t *)serialBuffer, BUFFER_SIZE);
 208:Core/Src/main.c **** 
 209:Core/Src/main.c ****   while (1)
 210:Core/Src/main.c ****   {
 211:Core/Src/main.c ****     /* USER CODE END WHILE */
 212:Core/Src/main.c **** 
 213:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 214:Core/Src/main.c ****   }
 215:Core/Src/main.c ****   /* USER CODE END 3 */
 216:Core/Src/main.c **** }
 217:Core/Src/main.c **** 
 218:Core/Src/main.c **** /**
 219:Core/Src/main.c ****   * @brief System Clock Configuration
 220:Core/Src/main.c ****   * @retval None
 221:Core/Src/main.c ****   */
 222:Core/Src/main.c **** void SystemClock_Config(void)
 223:Core/Src/main.c **** {
 224:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 225:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 226:Core/Src/main.c **** 
 227:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 228:Core/Src/main.c ****   */
 229:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 230:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 231:Core/Src/main.c **** 
 232:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 233:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 234:Core/Src/main.c ****   */
 235:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 236:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 237:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 238:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 239:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 4;
 240:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 72;
 241:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 242:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 3;
 243:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 244:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 245:Core/Src/main.c ****   {
 246:Core/Src/main.c ****     Error_Handler();
 247:Core/Src/main.c ****   }
 248:Core/Src/main.c **** 
 249:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 250:Core/Src/main.c ****   */
 251:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 252:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 253:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 254:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 255:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 256:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 257:Core/Src/main.c **** 
 258:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 259:Core/Src/main.c ****   {
 260:Core/Src/main.c ****     Error_Handler();
 261:Core/Src/main.c ****   }
ARM GAS  /tmp/ccVBnhdn.s 			page 14


 262:Core/Src/main.c **** }
 263:Core/Src/main.c **** 
 264:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 265:Core/Src/main.c **** 
 266:Core/Src/main.c **** /* USER CODE END 4 */
 267:Core/Src/main.c **** 
 268:Core/Src/main.c **** /**
 269:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 270:Core/Src/main.c ****   * @retval None
 271:Core/Src/main.c ****   */
 272:Core/Src/main.c **** void Error_Handler(void)
 273:Core/Src/main.c **** {
 450              		.loc 1 273 1 is_stmt 1 view -0
 451              		.cfi_startproc
 452              		@ Volatile: function does not return.
 453              		@ args = 0, pretend = 0, frame = 0
 454              		@ frame_needed = 0, uses_anonymous_args = 0
 455              		@ link register save eliminated.
 274:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 275:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 276:Core/Src/main.c ****   __disable_irq();
 456              		.loc 1 276 3 view .LVU104
 457              	.LBB9:
 458              	.LBI9:
 459              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
ARM GAS  /tmp/ccVBnhdn.s 			page 15


  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
ARM GAS  /tmp/ccVBnhdn.s 			page 16


  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
ARM GAS  /tmp/ccVBnhdn.s 			page 17


 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccVBnhdn.s 			page 18


 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
ARM GAS  /tmp/ccVBnhdn.s 			page 19


 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccVBnhdn.s 			page 20


 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccVBnhdn.s 			page 21


 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccVBnhdn.s 			page 22


 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
ARM GAS  /tmp/ccVBnhdn.s 			page 23


 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
ARM GAS  /tmp/ccVBnhdn.s 			page 24


 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccVBnhdn.s 			page 25


 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccVBnhdn.s 			page 26


 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
ARM GAS  /tmp/ccVBnhdn.s 			page 27


 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
ARM GAS  /tmp/ccVBnhdn.s 			page 28


 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccVBnhdn.s 			page 29


 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
ARM GAS  /tmp/ccVBnhdn.s 			page 30


 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccVBnhdn.s 			page 31


 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 460              		.loc 2 960 27 view .LVU105
 461              	.LBB10:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 462              		.loc 2 962 3 view .LVU106
 463              		.syntax unified
 464              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 465 0000 72B6     		cpsid i
 466              	@ 0 "" 2
 467              		.thumb
 468              		.syntax unified
 469              	.L28:
 470              	.LBE10:
 471              	.LBE9:
 277:Core/Src/main.c ****   while (1)
 472              		.loc 1 277 3 view .LVU107
 278:Core/Src/main.c ****   {
 279:Core/Src/main.c ****   }
 473              		.loc 1 279 3 view .LVU108
 277:Core/Src/main.c ****   while (1)
 474              		.loc 1 277 9 view .LVU109
 475 0002 FEE7     		b	.L28
 476              		.cfi_endproc
 477              	.LFE141:
 479              		.section	.text.SystemClock_Config,"ax",%progbits
 480              		.align	1
 481              		.global	SystemClock_Config
 482              		.syntax unified
 483              		.thumb
 484              		.thumb_func
 486              	SystemClock_Config:
 487              	.LFB140:
 223:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 488              		.loc 1 223 1 view -0
 489              		.cfi_startproc
 490              		@ args = 0, pretend = 0, frame = 80
 491              		@ frame_needed = 0, uses_anonymous_args = 0
 492 0000 00B5     		push	{lr}
 493              		.cfi_def_cfa_offset 4
 494              		.cfi_offset 14, -4
 495 0002 95B0     		sub	sp, sp, #84
ARM GAS  /tmp/ccVBnhdn.s 			page 32


 496              		.cfi_def_cfa_offset 88
 224:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 497              		.loc 1 224 3 view .LVU111
 224:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 498              		.loc 1 224 22 is_stmt 0 view .LVU112
 499 0004 3422     		movs	r2, #52
 500 0006 0021     		movs	r1, #0
 501 0008 07A8     		add	r0, sp, #28
 502 000a FFF7FEFF 		bl	memset
 503              	.LVL38:
 225:Core/Src/main.c **** 
 504              		.loc 1 225 3 is_stmt 1 view .LVU113
 225:Core/Src/main.c **** 
 505              		.loc 1 225 22 is_stmt 0 view .LVU114
 506 000e 0023     		movs	r3, #0
 507 0010 0293     		str	r3, [sp, #8]
 508 0012 0393     		str	r3, [sp, #12]
 509 0014 0493     		str	r3, [sp, #16]
 510 0016 0593     		str	r3, [sp, #20]
 511 0018 0693     		str	r3, [sp, #24]
 229:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 512              		.loc 1 229 3 is_stmt 1 view .LVU115
 513              	.LBB11:
 229:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 514              		.loc 1 229 3 view .LVU116
 515 001a 0093     		str	r3, [sp]
 229:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 516              		.loc 1 229 3 view .LVU117
 517 001c 204A     		ldr	r2, .L35
 518 001e 116C     		ldr	r1, [r2, #64]
 519 0020 41F08051 		orr	r1, r1, #268435456
 520 0024 1164     		str	r1, [r2, #64]
 229:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 521              		.loc 1 229 3 view .LVU118
 522 0026 126C     		ldr	r2, [r2, #64]
 523 0028 02F08052 		and	r2, r2, #268435456
 524 002c 0092     		str	r2, [sp]
 229:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 525              		.loc 1 229 3 view .LVU119
 526 002e 009A     		ldr	r2, [sp]
 527              	.LBE11:
 229:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 528              		.loc 1 229 3 view .LVU120
 230:Core/Src/main.c **** 
 529              		.loc 1 230 3 view .LVU121
 530              	.LBB12:
 230:Core/Src/main.c **** 
 531              		.loc 1 230 3 view .LVU122
 532 0030 0193     		str	r3, [sp, #4]
 230:Core/Src/main.c **** 
 533              		.loc 1 230 3 view .LVU123
 534 0032 1C4A     		ldr	r2, .L35+4
 535 0034 1368     		ldr	r3, [r2]
 536 0036 23F44043 		bic	r3, r3, #49152
 537 003a 43F48043 		orr	r3, r3, #16384
 538 003e 1360     		str	r3, [r2]
 230:Core/Src/main.c **** 
ARM GAS  /tmp/ccVBnhdn.s 			page 33


 539              		.loc 1 230 3 view .LVU124
 540 0040 1368     		ldr	r3, [r2]
 541 0042 03F44043 		and	r3, r3, #49152
 542 0046 0193     		str	r3, [sp, #4]
 230:Core/Src/main.c **** 
 543              		.loc 1 230 3 view .LVU125
 544 0048 019B     		ldr	r3, [sp, #4]
 545              	.LBE12:
 230:Core/Src/main.c **** 
 546              		.loc 1 230 3 view .LVU126
 235:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 547              		.loc 1 235 3 view .LVU127
 235:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 548              		.loc 1 235 36 is_stmt 0 view .LVU128
 549 004a 0123     		movs	r3, #1
 550 004c 0793     		str	r3, [sp, #28]
 236:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 551              		.loc 1 236 3 is_stmt 1 view .LVU129
 236:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 552              		.loc 1 236 30 is_stmt 0 view .LVU130
 553 004e 4FF48033 		mov	r3, #65536
 554 0052 0893     		str	r3, [sp, #32]
 237:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 555              		.loc 1 237 3 is_stmt 1 view .LVU131
 237:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 556              		.loc 1 237 34 is_stmt 0 view .LVU132
 557 0054 0223     		movs	r3, #2
 558 0056 0D93     		str	r3, [sp, #52]
 238:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 4;
 559              		.loc 1 238 3 is_stmt 1 view .LVU133
 238:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 4;
 560              		.loc 1 238 35 is_stmt 0 view .LVU134
 561 0058 4FF48002 		mov	r2, #4194304
 562 005c 0E92     		str	r2, [sp, #56]
 239:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 72;
 563              		.loc 1 239 3 is_stmt 1 view .LVU135
 239:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 72;
 564              		.loc 1 239 30 is_stmt 0 view .LVU136
 565 005e 0422     		movs	r2, #4
 566 0060 0F92     		str	r2, [sp, #60]
 240:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 567              		.loc 1 240 3 is_stmt 1 view .LVU137
 240:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 568              		.loc 1 240 30 is_stmt 0 view .LVU138
 569 0062 4822     		movs	r2, #72
 570 0064 1092     		str	r2, [sp, #64]
 241:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 3;
 571              		.loc 1 241 3 is_stmt 1 view .LVU139
 241:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 3;
 572              		.loc 1 241 30 is_stmt 0 view .LVU140
 573 0066 1193     		str	r3, [sp, #68]
 242:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 574              		.loc 1 242 3 is_stmt 1 view .LVU141
 242:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 575              		.loc 1 242 30 is_stmt 0 view .LVU142
 576 0068 0322     		movs	r2, #3
 577 006a 1292     		str	r2, [sp, #72]
ARM GAS  /tmp/ccVBnhdn.s 			page 34


 243:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 578              		.loc 1 243 3 is_stmt 1 view .LVU143
 243:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 579              		.loc 1 243 30 is_stmt 0 view .LVU144
 580 006c 1393     		str	r3, [sp, #76]
 244:Core/Src/main.c ****   {
 581              		.loc 1 244 3 is_stmt 1 view .LVU145
 244:Core/Src/main.c ****   {
 582              		.loc 1 244 7 is_stmt 0 view .LVU146
 583 006e 07A8     		add	r0, sp, #28
 584 0070 FFF7FEFF 		bl	HAL_RCC_OscConfig
 585              	.LVL39:
 244:Core/Src/main.c ****   {
 586              		.loc 1 244 6 discriminator 1 view .LVU147
 587 0074 80B9     		cbnz	r0, .L33
 251:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 588              		.loc 1 251 3 is_stmt 1 view .LVU148
 251:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 589              		.loc 1 251 31 is_stmt 0 view .LVU149
 590 0076 0F23     		movs	r3, #15
 591 0078 0293     		str	r3, [sp, #8]
 253:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 592              		.loc 1 253 3 is_stmt 1 view .LVU150
 253:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 593              		.loc 1 253 34 is_stmt 0 view .LVU151
 594 007a 0221     		movs	r1, #2
 595 007c 0391     		str	r1, [sp, #12]
 254:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 596              		.loc 1 254 3 is_stmt 1 view .LVU152
 254:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 597              		.loc 1 254 35 is_stmt 0 view .LVU153
 598 007e 0023     		movs	r3, #0
 599 0080 0493     		str	r3, [sp, #16]
 255:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 600              		.loc 1 255 3 is_stmt 1 view .LVU154
 255:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 601              		.loc 1 255 36 is_stmt 0 view .LVU155
 602 0082 4FF48052 		mov	r2, #4096
 603 0086 0592     		str	r2, [sp, #20]
 256:Core/Src/main.c **** 
 604              		.loc 1 256 3 is_stmt 1 view .LVU156
 256:Core/Src/main.c **** 
 605              		.loc 1 256 36 is_stmt 0 view .LVU157
 606 0088 0693     		str	r3, [sp, #24]
 258:Core/Src/main.c ****   {
 607              		.loc 1 258 3 is_stmt 1 view .LVU158
 258:Core/Src/main.c ****   {
 608              		.loc 1 258 7 is_stmt 0 view .LVU159
 609 008a 02A8     		add	r0, sp, #8
 610 008c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 611              	.LVL40:
 258:Core/Src/main.c ****   {
 612              		.loc 1 258 6 discriminator 1 view .LVU160
 613 0090 20B9     		cbnz	r0, .L34
 262:Core/Src/main.c **** 
 614              		.loc 1 262 1 view .LVU161
 615 0092 15B0     		add	sp, sp, #84
ARM GAS  /tmp/ccVBnhdn.s 			page 35


 616              		.cfi_remember_state
 617              		.cfi_def_cfa_offset 4
 618              		@ sp needed
 619 0094 5DF804FB 		ldr	pc, [sp], #4
 620              	.L33:
 621              		.cfi_restore_state
 246:Core/Src/main.c ****   }
 622              		.loc 1 246 5 is_stmt 1 view .LVU162
 623 0098 FFF7FEFF 		bl	Error_Handler
 624              	.LVL41:
 625              	.L34:
 260:Core/Src/main.c ****   }
 626              		.loc 1 260 5 view .LVU163
 627 009c FFF7FEFF 		bl	Error_Handler
 628              	.LVL42:
 629              	.L36:
 630              		.align	2
 631              	.L35:
 632 00a0 00380240 		.word	1073887232
 633 00a4 00700040 		.word	1073770496
 634              		.cfi_endproc
 635              	.LFE140:
 637              		.section	.text.main,"ax",%progbits
 638              		.align	1
 639              		.global	main
 640              		.syntax unified
 641              		.thumb
 642              		.thumb_func
 644              	main:
 645              	.LFB139:
 172:Core/Src/main.c **** 
 646              		.loc 1 172 1 view -0
 647              		.cfi_startproc
 648              		@ Volatile: function does not return.
 649              		@ args = 0, pretend = 0, frame = 0
 650              		@ frame_needed = 0, uses_anonymous_args = 0
 651 0000 08B5     		push	{r3, lr}
 652              		.cfi_def_cfa_offset 8
 653              		.cfi_offset 3, -8
 654              		.cfi_offset 14, -4
 180:Core/Src/main.c **** 
 655              		.loc 1 180 3 view .LVU165
 656 0002 FFF7FEFF 		bl	HAL_Init
 657              	.LVL43:
 187:Core/Src/main.c **** 
 658              		.loc 1 187 3 view .LVU166
 659 0006 FFF7FEFF 		bl	SystemClock_Config
 660              	.LVL44:
 194:Core/Src/main.c ****   MX_USART2_UART_Init();
 661              		.loc 1 194 3 view .LVU167
 662 000a FFF7FEFF 		bl	MX_GPIO_Init
 663              	.LVL45:
 195:Core/Src/main.c ****   MX_CAN1_Init();
 664              		.loc 1 195 3 view .LVU168
 665 000e FFF7FEFF 		bl	MX_USART2_UART_Init
 666              	.LVL46:
 196:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
ARM GAS  /tmp/ccVBnhdn.s 			page 36


 667              		.loc 1 196 3 view .LVU169
 668 0012 FFF7FEFF 		bl	MX_CAN1_Init
 669              	.LVL47:
 198:Core/Src/main.c ****   HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 670              		.loc 1 198 3 view .LVU170
 671 0016 074C     		ldr	r4, .L40
 672 0018 2046     		mov	r0, r4
 673 001a FFF7FEFF 		bl	HAL_CAN_Start
 674              	.LVL48:
 199:Core/Src/main.c **** 
 675              		.loc 1 199 3 view .LVU171
 676 001e 0221     		movs	r1, #2
 677 0020 2046     		mov	r0, r4
 678 0022 FFF7FEFF 		bl	HAL_CAN_ActivateNotification
 679              	.LVL49:
 207:Core/Src/main.c **** 
 680              		.loc 1 207 3 view .LVU172
 681 0026 1922     		movs	r2, #25
 682 0028 0349     		ldr	r1, .L40+4
 683 002a 0448     		ldr	r0, .L40+8
 684 002c FFF7FEFF 		bl	HAL_UARTEx_ReceiveToIdle_IT
 685              	.LVL50:
 686              	.L38:
 209:Core/Src/main.c ****   {
 687              		.loc 1 209 3 view .LVU173
 214:Core/Src/main.c ****   /* USER CODE END 3 */
 688              		.loc 1 214 3 view .LVU174
 209:Core/Src/main.c ****   {
 689              		.loc 1 209 9 view .LVU175
 690 0030 FEE7     		b	.L38
 691              	.L41:
 692 0032 00BF     		.align	2
 693              	.L40:
 694 0034 00000000 		.word	hcan1
 695 0038 00000000 		.word	serialBuffer
 696 003c 00000000 		.word	huart2
 697              		.cfi_endproc
 698              	.LFE139:
 700              		.global	RxData
 701              		.section	.bss.RxData,"aw",%nobits
 702              		.align	2
 705              	RxData:
 706 0000 00000000 		.space	8
 706      00000000 
 707              		.global	TxData
 708              		.section	.bss.TxData,"aw",%nobits
 709              		.align	2
 712              	TxData:
 713 0000 00000000 		.space	8
 713      00000000 
 714              		.global	TxMailBox
 715              		.section	.bss.TxMailBox,"aw",%nobits
 716              		.align	2
 719              	TxMailBox:
 720 0000 00000000 		.space	12
 720      00000000 
 720      00000000 
ARM GAS  /tmp/ccVBnhdn.s 			page 37


 721              		.global	RxHeader
 722              		.section	.bss.RxHeader,"aw",%nobits
 723              		.align	2
 726              	RxHeader:
 727 0000 00000000 		.space	28
 727      00000000 
 727      00000000 
 727      00000000 
 727      00000000 
 728              		.global	TxHeader
 729              		.section	.bss.TxHeader,"aw",%nobits
 730              		.align	2
 733              	TxHeader:
 734 0000 00000000 		.space	24
 734      00000000 
 734      00000000 
 734      00000000 
 734      00000000 
 735              		.global	serialBuffer
 736              		.section	.bss.serialBuffer,"aw",%nobits
 737              		.align	2
 740              	serialBuffer:
 741 0000 00000000 		.space	25
 741      00000000 
 741      00000000 
 741      00000000 
 741      00000000 
 742              		.text
 743              	.Letext0:
 744              		.file 3 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-n
 745              		.file 4 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-n
 746              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 747              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 748              		.file 7 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-n
 749              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 750              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 751              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 752              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 753              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_can.h"
 754              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 755              		.file 14 "Core/Inc/can.h"
 756              		.file 15 "Core/Inc/usart.h"
 757              		.file 16 "Core/Inc/gpio.h"
 758              		.file 17 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-
 759              		.file 18 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-
 760              		.file 19 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-
 761              		.file 20 "<built-in>"
 762              		.file 21 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
ARM GAS  /tmp/ccVBnhdn.s 			page 38


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccVBnhdn.s:21     .rodata.HAL_CAN_RxFifo0MsgPendingCallback.str1.4:00000000 $d
     /tmp/ccVBnhdn.s:31     .text.HAL_CAN_RxFifo0MsgPendingCallback:00000000 $t
     /tmp/ccVBnhdn.s:37     .text.HAL_CAN_RxFifo0MsgPendingCallback:00000000 HAL_CAN_RxFifo0MsgPendingCallback
     /tmp/ccVBnhdn.s:182    .text.HAL_CAN_RxFifo0MsgPendingCallback:00000098 $d
     /tmp/ccVBnhdn.s:726    .bss.RxHeader:00000000 RxHeader
     /tmp/ccVBnhdn.s:705    .bss.RxData:00000000 RxData
     /tmp/ccVBnhdn.s:740    .bss.serialBuffer:00000000 serialBuffer
     /tmp/ccVBnhdn.s:193    .text.HAL_UARTEx_RxEventCallback:00000000 $t
     /tmp/ccVBnhdn.s:199    .text.HAL_UARTEx_RxEventCallback:00000000 HAL_UARTEx_RxEventCallback
     /tmp/ccVBnhdn.s:430    .text.HAL_UARTEx_RxEventCallback:00000100 $d
     /tmp/ccVBnhdn.s:733    .bss.TxHeader:00000000 TxHeader
     /tmp/ccVBnhdn.s:712    .bss.TxData:00000000 TxData
     /tmp/ccVBnhdn.s:719    .bss.TxMailBox:00000000 TxMailBox
     /tmp/ccVBnhdn.s:442    .text.Error_Handler:00000000 $t
     /tmp/ccVBnhdn.s:448    .text.Error_Handler:00000000 Error_Handler
     /tmp/ccVBnhdn.s:480    .text.SystemClock_Config:00000000 $t
     /tmp/ccVBnhdn.s:486    .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/ccVBnhdn.s:632    .text.SystemClock_Config:000000a0 $d
     /tmp/ccVBnhdn.s:638    .text.main:00000000 $t
     /tmp/ccVBnhdn.s:644    .text.main:00000000 main
     /tmp/ccVBnhdn.s:694    .text.main:00000034 $d
     /tmp/ccVBnhdn.s:702    .bss.RxData:00000000 $d
     /tmp/ccVBnhdn.s:709    .bss.TxData:00000000 $d
     /tmp/ccVBnhdn.s:716    .bss.TxMailBox:00000000 $d
     /tmp/ccVBnhdn.s:723    .bss.RxHeader:00000000 $d
     /tmp/ccVBnhdn.s:730    .bss.TxHeader:00000000 $d
     /tmp/ccVBnhdn.s:737    .bss.serialBuffer:00000000 $d

UNDEFINED SYMBOLS
HAL_CAN_GetRxMessage
sprintf
strlen
HAL_UART_Transmit_IT
huart2
strncpy
strtol
HAL_UARTEx_ReceiveToIdle_IT
HAL_CAN_AddTxMessage
hcan1
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
MX_GPIO_Init
MX_USART2_UART_Init
MX_CAN1_Init
HAL_CAN_Start
HAL_CAN_ActivateNotification
