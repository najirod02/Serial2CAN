ARM GAS  /tmp/cc4m9BWJ.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.section	.rodata.HAL_CAN_RxFifo0MsgPendingCallback.str1.4,"aMS",%progbits,1
  21              		.align	2
  22              	.LC0:
  23 0000 25632530 		.ascii	"%c%03lX%lu\000"
  23      336C5825 
  23      6C7500
  24 000b 00       		.align	2
  25              	.LC1:
  26 000c 25303258 		.ascii	"%02X\000"
  26      00
  27 0011 000000   		.align	2
  28              	.LC2:
  29 0014 0D00     		.ascii	"\015\000"
  30              		.section	.text.HAL_CAN_RxFifo0MsgPendingCallback,"ax",%progbits
  31              		.align	1
  32              		.global	HAL_CAN_RxFifo0MsgPendingCallback
  33              		.syntax unified
  34              		.thumb
  35              		.thumb_func
  37              	HAL_CAN_RxFifo0MsgPendingCallback:
  38              	.LVL0:
  39              	.LFB137:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
ARM GAS  /tmp/cc4m9BWJ.s 			page 2


  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include "can.h"
  22:Core/Src/main.c **** #include "usart.h"
  23:Core/Src/main.c **** #include "gpio.h"
  24:Core/Src/main.c **** 
  25:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  26:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  27:Core/Src/main.c **** #include "string.h"
  28:Core/Src/main.c **** #include "stdio.h"
  29:Core/Src/main.c **** #include "stdlib.h"
  30:Core/Src/main.c **** #include "math.h"
  31:Core/Src/main.c **** #include <stdbool.h>
  32:Core/Src/main.c **** /* USER CODE END Includes */
  33:Core/Src/main.c **** 
  34:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  35:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /* USER CODE END PTD */
  38:Core/Src/main.c **** 
  39:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  40:Core/Src/main.c **** /* USER CODE BEGIN PD */
  41:Core/Src/main.c **** #define BUFFER_SIZE 25
  42:Core/Src/main.c **** /* USER CODE END PD */
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  45:Core/Src/main.c **** /* USER CODE BEGIN PM */
  46:Core/Src/main.c **** 
  47:Core/Src/main.c **** /* USER CODE END PM */
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  50:Core/Src/main.c **** 
  51:Core/Src/main.c **** /* USER CODE BEGIN PV */
  52:Core/Src/main.c **** char serialBuffer[BUFFER_SIZE];
  53:Core/Src/main.c **** /* USER CODE END PV */
  54:Core/Src/main.c **** 
  55:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  56:Core/Src/main.c **** void SystemClock_Config(void);
  57:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  58:Core/Src/main.c **** 
  59:Core/Src/main.c **** /* USER CODE END PFP */
  60:Core/Src/main.c **** 
  61:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  62:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  63:Core/Src/main.c **** CAN_TxHeaderTypeDef TxHeader;
  64:Core/Src/main.c **** CAN_RxHeaderTypeDef RxHeader;
  65:Core/Src/main.c **** 
  66:Core/Src/main.c **** //available only 3 mailboxes, the hw will automatically decide which
  67:Core/Src/main.c **** //to forward the frame
  68:Core/Src/main.c **** uint32_t TxMailBox[3];
  69:Core/Src/main.c **** 
  70:Core/Src/main.c **** //both to contain the maximum payload for both standard and extended frame
  71:Core/Src/main.c **** uint8_t TxData[8];
  72:Core/Src/main.c **** uint8_t RxData[8];
  73:Core/Src/main.c **** 
ARM GAS  /tmp/cc4m9BWJ.s 			page 3


  74:Core/Src/main.c **** /**
  75:Core/Src/main.c ****  * when we have pending messages, read them, construct a string
  76:Core/Src/main.c ****  * to send back to host pc through uart.
  77:Core/Src/main.c ****  * 
  78:Core/Src/main.c ****  * in order to create a compliant slcand frame we have the following format:
  79:Core/Src/main.c ****  * <type><id><dlc><data>
  80:Core/Src/main.c ****  * 
  81:Core/Src/main.c ****  */
  82:Core/Src/main.c **** char can2Uart[BUFFER_SIZE] = {0};
  83:Core/Src/main.c **** bool ready2Send = false;
  84:Core/Src/main.c **** void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
  40              		.loc 1 84 64 view -0
  41              		.cfi_startproc
  42              		@ args = 0, pretend = 0, frame = 0
  43              		@ frame_needed = 0, uses_anonymous_args = 0
  44              		.loc 1 84 64 is_stmt 0 view .LVU1
  45 0000 30B5     		push	{r4, r5, lr}
  46              		.cfi_def_cfa_offset 12
  47              		.cfi_offset 4, -12
  48              		.cfi_offset 5, -8
  49              		.cfi_offset 14, -4
  50 0002 83B0     		sub	sp, sp, #12
  51              		.cfi_def_cfa_offset 24
  85:Core/Src/main.c **** 
  86:Core/Src/main.c ****   HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
  52              		.loc 1 86 3 is_stmt 1 view .LVU2
  53 0004 194C     		ldr	r4, .L7
  54 0006 1A4B     		ldr	r3, .L7+4
  55 0008 2246     		mov	r2, r4
  56 000a 0021     		movs	r1, #0
  57 000c FFF7FEFF 		bl	HAL_CAN_GetRxMessage
  58              	.LVL1:
  87:Core/Src/main.c ****   
  88:Core/Src/main.c ****   //copy Id and DLC in buffer
  89:Core/Src/main.c ****   
  90:Core/Src/main.c ****   char typeFrame = (RxHeader.RTR == CAN_RTR_DATA) ? 't' : 'r';
  59              		.loc 1 90 3 view .LVU3
  60              		.loc 1 90 29 is_stmt 0 view .LVU4
  61 0010 E368     		ldr	r3, [r4, #12]
  62              		.loc 1 90 8 view .LVU5
  63 0012 7BB9     		cbnz	r3, .L5
  64              		.loc 1 90 8 discriminator 1 view .LVU6
  65 0014 7422     		movs	r2, #116
  66              	.L2:
  67              	.LVL2:
  91:Core/Src/main.c ****   sprintf(can2Uart, "%c%03lX%lu", typeFrame, RxHeader.StdId, RxHeader.DLC);
  68              		.loc 1 91 3 is_stmt 1 view .LVU7
  69 0016 154B     		ldr	r3, .L7
  70 0018 164D     		ldr	r5, .L7+8
  71 001a 1969     		ldr	r1, [r3, #16]
  72 001c 0091     		str	r1, [sp]
  73 001e 1B68     		ldr	r3, [r3]
  74 0020 1549     		ldr	r1, .L7+12
  75 0022 2846     		mov	r0, r5
  76 0024 FFF7FEFF 		bl	sprintf
  77              	.LVL3:
  92:Core/Src/main.c **** 
ARM GAS  /tmp/cc4m9BWJ.s 			page 4


  93:Core/Src/main.c ****   //convertion of bytes into hex characters
  94:Core/Src/main.c ****   //1 byte = 2 hex values
  95:Core/Src/main.c ****   char *offset = can2Uart + strlen(can2Uart);
  78              		.loc 1 95 3 view .LVU8
  79              		.loc 1 95 29 is_stmt 0 view .LVU9
  80 0028 2846     		mov	r0, r5
  81 002a FFF7FEFF 		bl	strlen
  82              	.LVL4:
  83              		.loc 1 95 9 discriminator 1 view .LVU10
  84 002e 0544     		add	r5, r5, r0
  85              	.LVL5:
  96:Core/Src/main.c ****   for (uint8_t i = 0; i < RxHeader.DLC; i++) {
  86              		.loc 1 96 3 is_stmt 1 view .LVU11
  87              	.LBB4:
  88              		.loc 1 96 8 view .LVU12
  89              		.loc 1 96 16 is_stmt 0 view .LVU13
  90 0030 0024     		movs	r4, #0
  91              		.loc 1 96 3 view .LVU14
  92 0032 0AE0     		b	.L3
  93              	.LVL6:
  94              	.L5:
  95              		.loc 1 96 3 view .LVU15
  96              	.LBE4:
  90:Core/Src/main.c ****   sprintf(can2Uart, "%c%03lX%lu", typeFrame, RxHeader.StdId, RxHeader.DLC);
  97              		.loc 1 90 8 discriminator 2 view .LVU16
  98 0034 7222     		movs	r2, #114
  99 0036 EEE7     		b	.L2
 100              	.LVL7:
 101              	.L4:
 102              	.LBB5:
  97:Core/Src/main.c ****       sprintf(offset, "%02X", RxData[i]);
 103              		.loc 1 97 7 is_stmt 1 view .LVU17
 104 0038 0D4B     		ldr	r3, .L7+4
 105 003a 1A5D     		ldrb	r2, [r3, r4]	@ zero_extendqisi2
 106 003c 0F49     		ldr	r1, .L7+16
 107 003e 2846     		mov	r0, r5
 108 0040 FFF7FEFF 		bl	sprintf
 109              	.LVL8:
  98:Core/Src/main.c ****       offset += 2;
 110              		.loc 1 98 7 view .LVU18
 111              		.loc 1 98 14 is_stmt 0 view .LVU19
 112 0044 0235     		adds	r5, r5, #2
 113              	.LVL9:
  96:Core/Src/main.c ****       sprintf(offset, "%02X", RxData[i]);
 114              		.loc 1 96 42 is_stmt 1 discriminator 3 view .LVU20
 115 0046 0134     		adds	r4, r4, #1
 116              	.LVL10:
  96:Core/Src/main.c ****       sprintf(offset, "%02X", RxData[i]);
 117              		.loc 1 96 42 is_stmt 0 discriminator 3 view .LVU21
 118 0048 E4B2     		uxtb	r4, r4
 119              	.LVL11:
 120              	.L3:
  96:Core/Src/main.c ****       sprintf(offset, "%02X", RxData[i]);
 121              		.loc 1 96 25 is_stmt 1 discriminator 1 view .LVU22
  96:Core/Src/main.c ****       sprintf(offset, "%02X", RxData[i]);
 122              		.loc 1 96 35 is_stmt 0 discriminator 1 view .LVU23
 123 004a 084B     		ldr	r3, .L7
ARM GAS  /tmp/cc4m9BWJ.s 			page 5


 124 004c 1B69     		ldr	r3, [r3, #16]
  96:Core/Src/main.c ****       sprintf(offset, "%02X", RxData[i]);
 125              		.loc 1 96 25 discriminator 1 view .LVU24
 126 004e 9C42     		cmp	r4, r3
 127 0050 F2D3     		bcc	.L4
  96:Core/Src/main.c ****       sprintf(offset, "%02X", RxData[i]);
 128              		.loc 1 96 25 discriminator 1 view .LVU25
 129              	.LBE5:
  99:Core/Src/main.c ****   }
 100:Core/Src/main.c ****   strcat(can2Uart, "\r");
 130              		.loc 1 100 3 is_stmt 1 view .LVU26
 131 0052 084C     		ldr	r4, .L7+8
 132              	.LVL12:
 133              		.loc 1 100 3 is_stmt 0 view .LVU27
 134 0054 2046     		mov	r0, r4
 135 0056 FFF7FEFF 		bl	strlen
 136              	.LVL13:
 137              		.loc 1 100 3 discriminator 1 view .LVU28
 138 005a 094B     		ldr	r3, .L7+20
 139 005c 1B88     		ldrh	r3, [r3]	@ unaligned
 140 005e 2352     		strh	r3, [r4, r0]	@ unaligned
 101:Core/Src/main.c ****   ready2Send = true;
 141              		.loc 1 101 3 is_stmt 1 view .LVU29
 142              		.loc 1 101 14 is_stmt 0 view .LVU30
 143 0060 084B     		ldr	r3, .L7+24
 144 0062 0122     		movs	r2, #1
 145 0064 1A70     		strb	r2, [r3]
 102:Core/Src/main.c **** 
 103:Core/Src/main.c ****   //an example of what should look like the final string
 104:Core/Src/main.c ****   //"t4563112233\r";// can_id 0x456, len 3, data 0x11 0x22 0x33
 105:Core/Src/main.c **** 
 106:Core/Src/main.c ****   //volatile HAL_StatusTypeDef result =  HAL_UART_Transmit(&huart3, (uint8_t *) can2Uart, strlen(ca
 107:Core/Src/main.c ****   //if(result == HAL_OK) return;
 108:Core/Src/main.c ****   //memset(can2Uart, 0, BUFFER_SIZE);//clear buffer
 109:Core/Src/main.c **** }
 146              		.loc 1 109 1 view .LVU31
 147 0066 03B0     		add	sp, sp, #12
 148              		.cfi_def_cfa_offset 12
 149              		@ sp needed
 150 0068 30BD     		pop	{r4, r5, pc}
 151              	.LVL14:
 152              	.L8:
 153              		.loc 1 109 1 view .LVU32
 154 006a 00BF     		.align	2
 155              	.L7:
 156 006c 00000000 		.word	RxHeader
 157 0070 00000000 		.word	RxData
 158 0074 00000000 		.word	can2Uart
 159 0078 00000000 		.word	.LC0
 160 007c 0C000000 		.word	.LC1
 161 0080 14000000 		.word	.LC2
 162 0084 00000000 		.word	ready2Send
 163              		.cfi_endproc
 164              	.LFE137:
 166              		.section	.text.HAL_UARTEx_RxEventCallback,"ax",%progbits
 167              		.align	1
 168              		.global	HAL_UARTEx_RxEventCallback
ARM GAS  /tmp/cc4m9BWJ.s 			page 6


 169              		.syntax unified
 170              		.thumb
 171              		.thumb_func
 173              	HAL_UARTEx_RxEventCallback:
 174              	.LVL15:
 175              	.LFB138:
 110:Core/Src/main.c **** 
 111:Core/Src/main.c **** /**
 112:Core/Src/main.c ****  * when a can frame message is received from the serial, create a new frame to send
 113:Core/Src/main.c ****  * through the "real" can interface.
 114:Core/Src/main.c ****  * 
 115:Core/Src/main.c ****  * we assume a standard frame to be received
 116:Core/Src/main.c ****  */
 117:Core/Src/main.c **** void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
 118:Core/Src/main.c **** {
 176              		.loc 1 118 1 is_stmt 1 view -0
 177              		.cfi_startproc
 178              		@ args = 0, pretend = 0, frame = 8
 179              		@ frame_needed = 0, uses_anonymous_args = 0
 180              		.loc 1 118 1 is_stmt 0 view .LVU34
 181 0000 30B5     		push	{r4, r5, lr}
 182              		.cfi_def_cfa_offset 12
 183              		.cfi_offset 4, -12
 184              		.cfi_offset 5, -8
 185              		.cfi_offset 14, -4
 186 0002 83B0     		sub	sp, sp, #12
 187              		.cfi_def_cfa_offset 24
 119:Core/Src/main.c ****   //extended frames are dropped as they are not used
 120:Core/Src/main.c ****   //also any frame type not recognized is dropped
 121:Core/Src/main.c ****   if(serialBuffer[0] != 't' && serialBuffer[0] != 'r'){ 
 188              		.loc 1 121 3 is_stmt 1 view .LVU35
 189              		.loc 1 121 18 is_stmt 0 view .LVU36
 190 0004 3E4B     		ldr	r3, .L25
 191 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 192              		.loc 1 121 5 view .LVU37
 193 0008 742B     		cmp	r3, #116
 194 000a 01D0     		beq	.L10
 195              		.loc 1 121 29 discriminator 1 view .LVU38
 196 000c 722B     		cmp	r3, #114
 197 000e 29D1     		bne	.L23
 198              	.L10:
 122:Core/Src/main.c ****     memset(serialBuffer, 0, BUFFER_SIZE);
 123:Core/Src/main.c ****     //waiting for new message
 124:Core/Src/main.c ****     HAL_UARTEx_ReceiveToIdle_IT(&huart2, (uint8_t *)serialBuffer, BUFFER_SIZE);
 125:Core/Src/main.c ****     return;
 126:Core/Src/main.c ****   }
 127:Core/Src/main.c **** 
 128:Core/Src/main.c ****   //create the can frame and send it to a mailbox
 129:Core/Src/main.c ****   char id[4] = {0};
 199              		.loc 1 129 3 is_stmt 1 view .LVU39
 200              		.loc 1 129 8 is_stmt 0 view .LVU40
 201 0010 0024     		movs	r4, #0
 202 0012 0194     		str	r4, [sp, #4]
 130:Core/Src/main.c ****   strncpy(id, &serialBuffer[1], 3);//assuming standard id
 203              		.loc 1 130 3 is_stmt 1 view .LVU41
 204 0014 3B4D     		ldr	r5, .L25+4
 205 0016 0322     		movs	r2, #3
ARM GAS  /tmp/cc4m9BWJ.s 			page 7


 206 0018 2946     		mov	r1, r5
 207              	.LVL16:
 208              		.loc 1 130 3 is_stmt 0 view .LVU42
 209 001a 01A8     		add	r0, sp, #4
 210              	.LVL17:
 211              		.loc 1 130 3 view .LVU43
 212 001c FFF7FEFF 		bl	strncpy
 213              	.LVL18:
 131:Core/Src/main.c ****   TxHeader.StdId = (uint32_t)strtol(id, NULL, 16);
 214              		.loc 1 131 3 is_stmt 1 view .LVU44
 215              		.loc 1 131 30 is_stmt 0 view .LVU45
 216 0020 1022     		movs	r2, #16
 217 0022 2146     		mov	r1, r4
 218 0024 01A8     		add	r0, sp, #4
 219 0026 FFF7FEFF 		bl	strtol
 220              	.LVL19:
 221              		.loc 1 131 18 discriminator 1 view .LVU46
 222 002a 374B     		ldr	r3, .L25+8
 223 002c 1860     		str	r0, [r3]
 132:Core/Src/main.c **** 
 133:Core/Src/main.c ****   TxHeader.ExtId = 0; //not using extended ID
 224              		.loc 1 133 3 is_stmt 1 view .LVU47
 225              		.loc 1 133 18 is_stmt 0 view .LVU48
 226 002e 5C60     		str	r4, [r3, #4]
 134:Core/Src/main.c ****   TxHeader.IDE = CAN_ID_STD; //standard ID
 227              		.loc 1 134 3 is_stmt 1 view .LVU49
 228              		.loc 1 134 16 is_stmt 0 view .LVU50
 229 0030 9C60     		str	r4, [r3, #8]
 135:Core/Src/main.c **** 
 136:Core/Src/main.c ****   TxHeader.RTR = (serialBuffer[0] == 't') ?  //data frame / remote frame
 230              		.loc 1 136 3 is_stmt 1 view .LVU51
 231              		.loc 1 136 31 is_stmt 0 view .LVU52
 232 0032 15F8013C 		ldrb	r3, [r5, #-1]	@ zero_extendqisi2
 137:Core/Src/main.c ****                   CAN_RTR_DATA : CAN_RTR_REMOTE;
 233              		.loc 1 137 32 view .LVU53
 234 0036 742B     		cmp	r3, #116
 235 0038 00D0     		beq	.L12
 236              		.loc 1 137 32 discriminator 2 view .LVU54
 237 003a 0224     		movs	r4, #2
 238              	.L12:
 136:Core/Src/main.c ****                   CAN_RTR_DATA : CAN_RTR_REMOTE;
 239              		.loc 1 136 16 view .LVU55
 240 003c 324B     		ldr	r3, .L25+8
 241 003e DC60     		str	r4, [r3, #12]
 138:Core/Src/main.c ****   
 139:Core/Src/main.c ****   TxHeader.TransmitGlobalTime = DISABLE;
 242              		.loc 1 139 3 is_stmt 1 view .LVU56
 243              		.loc 1 139 31 is_stmt 0 view .LVU57
 244 0040 0022     		movs	r2, #0
 245 0042 1A75     		strb	r2, [r3, #20]
 140:Core/Src/main.c **** 
 141:Core/Src/main.c ****   //collect payload to send skipping # char
 142:Core/Src/main.c ****   uint8_t payload_length = (strlen(serialBuffer) - 5) / 2; //each byte = 2 hex chars
 246              		.loc 1 142 3 is_stmt 1 view .LVU58
 247              		.loc 1 142 29 is_stmt 0 view .LVU59
 248 0044 2E48     		ldr	r0, .L25
 249 0046 FFF7FEFF 		bl	strlen
ARM GAS  /tmp/cc4m9BWJ.s 			page 8


 250              	.LVL20:
 251              		.loc 1 142 50 discriminator 1 view .LVU60
 252 004a 0538     		subs	r0, r0, #5
 253              		.loc 1 142 55 discriminator 1 view .LVU61
 254 004c 4508     		lsrs	r5, r0, #1
 255              		.loc 1 142 11 discriminator 1 view .LVU62
 256 004e C0F34700 		ubfx	r0, r0, #1, #8
 257              	.LVL21:
 143:Core/Src/main.c ****   if (payload_length > 8) {
 258              		.loc 1 143 3 is_stmt 1 view .LVU63
 259              		.loc 1 143 6 is_stmt 0 view .LVU64
 260 0052 0828     		cmp	r0, #8
 261 0054 14D8     		bhi	.L24
 144:Core/Src/main.c ****       //payload too large
 145:Core/Src/main.c ****       //drop message and abort sending can
 146:Core/Src/main.c ****       //for example, 123#001122334455667788 is dropped
 147:Core/Src/main.c ****       memset(serialBuffer, 0, BUFFER_SIZE);
 148:Core/Src/main.c ****       //waiting for new message
 149:Core/Src/main.c ****       HAL_UARTEx_ReceiveToIdle_IT(&huart2, (uint8_t *)serialBuffer, BUFFER_SIZE);
 150:Core/Src/main.c ****       return;
 151:Core/Src/main.c ****   }
 152:Core/Src/main.c **** 
 153:Core/Src/main.c ****   if(TxHeader.RTR == CAN_RTR_DATA){
 262              		.loc 1 153 3 is_stmt 1 view .LVU65
 263              		.loc 1 153 5 is_stmt 0 view .LVU66
 264 0056 002C     		cmp	r4, #0
 265 0058 4FD0     		beq	.L20
 154:Core/Src/main.c ****     for (int i = 0; i < payload_length; i++) {
 155:Core/Src/main.c ****       //create pair of hex chars
 156:Core/Src/main.c ****       char hex_byte[3] = {serialBuffer[5 + 2 * i], serialBuffer[5 + 2 * i + 1], '\0'};
 157:Core/Src/main.c ****       TxData[i] = (uint8_t)strtol(hex_byte, NULL, 16);//convert each hex pair to uint8_t
 158:Core/Src/main.c ****     }
 159:Core/Src/main.c ****     TxHeader.DLC = payload_length;
 160:Core/Src/main.c ****   } else {
 161:Core/Src/main.c ****     //remote request, no payload defined
 162:Core/Src/main.c ****     TxHeader.DLC = (uint32_t)serialBuffer[4];
 266              		.loc 1 162 5 is_stmt 1 view .LVU67
 267              		.loc 1 162 42 is_stmt 0 view .LVU68
 268 005a 294B     		ldr	r3, .L25
 269 005c 1A79     		ldrb	r2, [r3, #4]	@ zero_extendqisi2
 270              		.loc 1 162 18 view .LVU69
 271 005e 2A4B     		ldr	r3, .L25+8
 272 0060 1A61     		str	r2, [r3, #16]
 273 0062 35E0     		b	.L17
 274              	.LVL22:
 275              	.L23:
 122:Core/Src/main.c ****     //waiting for new message
 276              		.loc 1 122 5 is_stmt 1 view .LVU70
 277 0064 2649     		ldr	r1, .L25
 278              	.LVL23:
 122:Core/Src/main.c ****     //waiting for new message
 279              		.loc 1 122 5 is_stmt 0 view .LVU71
 280 0066 0023     		movs	r3, #0
 281 0068 0B60     		str	r3, [r1]
 282 006a 4B60     		str	r3, [r1, #4]
 283 006c 8B60     		str	r3, [r1, #8]
 284 006e CB60     		str	r3, [r1, #12]
ARM GAS  /tmp/cc4m9BWJ.s 			page 9


 285 0070 0B61     		str	r3, [r1, #16]
 286 0072 4B61     		str	r3, [r1, #20]
 287 0074 0B76     		strb	r3, [r1, #24]
 124:Core/Src/main.c ****     return;
 288              		.loc 1 124 5 is_stmt 1 view .LVU72
 289 0076 1922     		movs	r2, #25
 290 0078 2448     		ldr	r0, .L25+12
 291              	.LVL24:
 124:Core/Src/main.c ****     return;
 292              		.loc 1 124 5 is_stmt 0 view .LVU73
 293 007a FFF7FEFF 		bl	HAL_UARTEx_ReceiveToIdle_IT
 294              	.LVL25:
 125:Core/Src/main.c ****   }
 295              		.loc 1 125 5 is_stmt 1 view .LVU74
 296 007e 3AE0     		b	.L9
 297              	.LVL26:
 298              	.L24:
 147:Core/Src/main.c ****       //waiting for new message
 299              		.loc 1 147 7 view .LVU75
 300 0080 1F49     		ldr	r1, .L25
 301 0082 0023     		movs	r3, #0
 302 0084 0B60     		str	r3, [r1]
 303 0086 4B60     		str	r3, [r1, #4]
 304 0088 8B60     		str	r3, [r1, #8]
 305 008a CB60     		str	r3, [r1, #12]
 306 008c 0B61     		str	r3, [r1, #16]
 307 008e 4B61     		str	r3, [r1, #20]
 308 0090 0B76     		strb	r3, [r1, #24]
 149:Core/Src/main.c ****       return;
 309              		.loc 1 149 7 view .LVU76
 310 0092 1922     		movs	r2, #25
 311 0094 1D48     		ldr	r0, .L25+12
 312              	.LVL27:
 149:Core/Src/main.c ****       return;
 313              		.loc 1 149 7 is_stmt 0 view .LVU77
 314 0096 FFF7FEFF 		bl	HAL_UARTEx_ReceiveToIdle_IT
 315              	.LVL28:
 150:Core/Src/main.c ****   }
 316              		.loc 1 150 7 is_stmt 1 view .LVU78
 317 009a 2CE0     		b	.L9
 318              	.LVL29:
 319              	.L16:
 320              	.LBB6:
 321              	.LBB7:
 156:Core/Src/main.c ****       TxData[i] = (uint8_t)strtol(hex_byte, NULL, 16);//convert each hex pair to uint8_t
 322              		.loc 1 156 7 view .LVU79
 156:Core/Src/main.c ****       TxData[i] = (uint8_t)strtol(hex_byte, NULL, 16);//convert each hex pair to uint8_t
 323              		.loc 1 156 46 is_stmt 0 view .LVU80
 324 009c 6300     		lsls	r3, r4, #1
 156:Core/Src/main.c ****       TxData[i] = (uint8_t)strtol(hex_byte, NULL, 16);//convert each hex pair to uint8_t
 325              		.loc 1 156 42 view .LVU81
 326 009e 0533     		adds	r3, r3, #5
 156:Core/Src/main.c ****       TxData[i] = (uint8_t)strtol(hex_byte, NULL, 16);//convert each hex pair to uint8_t
 327              		.loc 1 156 39 view .LVU82
 328 00a0 174A     		ldr	r2, .L25
 329 00a2 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 156:Core/Src/main.c ****       TxData[i] = (uint8_t)strtol(hex_byte, NULL, 16);//convert each hex pair to uint8_t
ARM GAS  /tmp/cc4m9BWJ.s 			page 10


 330              		.loc 1 156 12 view .LVU83
 331 00a4 8DF80030 		strb	r3, [sp]
 156:Core/Src/main.c ****       TxData[i] = (uint8_t)strtol(hex_byte, NULL, 16);//convert each hex pair to uint8_t
 332              		.loc 1 156 75 view .LVU84
 333 00a8 E31C     		adds	r3, r4, #3
 156:Core/Src/main.c ****       TxData[i] = (uint8_t)strtol(hex_byte, NULL, 16);//convert each hex pair to uint8_t
 334              		.loc 1 156 64 view .LVU85
 335 00aa 12F81330 		ldrb	r3, [r2, r3, lsl #1]	@ zero_extendqisi2
 156:Core/Src/main.c ****       TxData[i] = (uint8_t)strtol(hex_byte, NULL, 16);//convert each hex pair to uint8_t
 336              		.loc 1 156 12 view .LVU86
 337 00ae 8DF80130 		strb	r3, [sp, #1]
 338 00b2 0021     		movs	r1, #0
 339 00b4 8DF80210 		strb	r1, [sp, #2]
 157:Core/Src/main.c ****     }
 340              		.loc 1 157 7 is_stmt 1 view .LVU87
 157:Core/Src/main.c ****     }
 341              		.loc 1 157 28 is_stmt 0 view .LVU88
 342 00b8 1022     		movs	r2, #16
 343 00ba 6846     		mov	r0, sp
 344 00bc FFF7FEFF 		bl	strtol
 345              	.LVL30:
 157:Core/Src/main.c ****     }
 346              		.loc 1 157 17 discriminator 1 view .LVU89
 347 00c0 134B     		ldr	r3, .L25+16
 348 00c2 1855     		strb	r0, [r3, r4]
 349              	.LBE7:
 154:Core/Src/main.c ****       //create pair of hex chars
 350              		.loc 1 154 42 is_stmt 1 discriminator 3 view .LVU90
 351 00c4 0134     		adds	r4, r4, #1
 352              	.LVL31:
 353              	.L14:
 154:Core/Src/main.c ****       //create pair of hex chars
 354              		.loc 1 154 23 discriminator 1 view .LVU91
 355 00c6 EBB2     		uxtb	r3, r5
 356 00c8 A342     		cmp	r3, r4
 357 00ca E7DC     		bgt	.L16
 358              	.LBE6:
 159:Core/Src/main.c ****   } else {
 359              		.loc 1 159 5 view .LVU92
 159:Core/Src/main.c ****   } else {
 360              		.loc 1 159 18 is_stmt 0 view .LVU93
 361 00cc 0E4A     		ldr	r2, .L25+8
 362 00ce 1361     		str	r3, [r2, #16]
 363              	.LVL32:
 364              	.L17:
 163:Core/Src/main.c ****   }
 164:Core/Src/main.c **** 
 165:Core/Src/main.c ****   HAL_CAN_AddTxMessage(&hcan1, &TxHeader, &TxData[0], &TxMailBox[0]);
 365              		.loc 1 165 3 is_stmt 1 view .LVU94
 366 00d0 104B     		ldr	r3, .L25+20
 367 00d2 0F4A     		ldr	r2, .L25+16
 368 00d4 0C49     		ldr	r1, .L25+8
 369 00d6 1048     		ldr	r0, .L25+24
 370 00d8 FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 371              	.LVL33:
 166:Core/Src/main.c **** 
 167:Core/Src/main.c ****   //remain in listening for a new cansend frame
ARM GAS  /tmp/cc4m9BWJ.s 			page 11


 168:Core/Src/main.c ****   memset(serialBuffer, 0, BUFFER_SIZE);
 372              		.loc 1 168 3 view .LVU95
 373 00dc 0849     		ldr	r1, .L25
 374 00de 0023     		movs	r3, #0
 375 00e0 0B60     		str	r3, [r1]
 376 00e2 4B60     		str	r3, [r1, #4]
 377 00e4 8B60     		str	r3, [r1, #8]
 378 00e6 CB60     		str	r3, [r1, #12]
 379 00e8 0B61     		str	r3, [r1, #16]
 380 00ea 4B61     		str	r3, [r1, #20]
 381 00ec 0B76     		strb	r3, [r1, #24]
 169:Core/Src/main.c ****   HAL_UARTEx_ReceiveToIdle_IT(&huart2, (uint8_t *)serialBuffer, BUFFER_SIZE);
 382              		.loc 1 169 3 view .LVU96
 383 00ee 1922     		movs	r2, #25
 384 00f0 0648     		ldr	r0, .L25+12
 385 00f2 FFF7FEFF 		bl	HAL_UARTEx_ReceiveToIdle_IT
 386              	.LVL34:
 387              	.L9:
 170:Core/Src/main.c **** }
 388              		.loc 1 170 1 is_stmt 0 view .LVU97
 389 00f6 03B0     		add	sp, sp, #12
 390              		.cfi_remember_state
 391              		.cfi_def_cfa_offset 12
 392              		@ sp needed
 393 00f8 30BD     		pop	{r4, r5, pc}
 394              	.LVL35:
 395              	.L20:
 396              		.cfi_restore_state
 397              	.LBB8:
 154:Core/Src/main.c ****       //create pair of hex chars
 398              		.loc 1 154 14 view .LVU98
 399 00fa 0024     		movs	r4, #0
 400 00fc E3E7     		b	.L14
 401              	.L26:
 402 00fe 00BF     		.align	2
 403              	.L25:
 404 0100 00000000 		.word	serialBuffer
 405 0104 01000000 		.word	serialBuffer+1
 406 0108 00000000 		.word	TxHeader
 407 010c 00000000 		.word	huart2
 408 0110 00000000 		.word	TxData
 409 0114 00000000 		.word	TxMailBox
 410 0118 00000000 		.word	hcan1
 411              	.LBE8:
 412              		.cfi_endproc
 413              	.LFE138:
 415              		.section	.text.Error_Handler,"ax",%progbits
 416              		.align	1
 417              		.global	Error_Handler
 418              		.syntax unified
 419              		.thumb
 420              		.thumb_func
 422              	Error_Handler:
 423              	.LFB141:
 171:Core/Src/main.c **** 
 172:Core/Src/main.c **** /* USER CODE END 0 */
 173:Core/Src/main.c **** 
ARM GAS  /tmp/cc4m9BWJ.s 			page 12


 174:Core/Src/main.c **** /**
 175:Core/Src/main.c ****   * @brief  The application entry point.
 176:Core/Src/main.c ****   * @retval int
 177:Core/Src/main.c ****   */
 178:Core/Src/main.c **** int main(void)
 179:Core/Src/main.c **** {
 180:Core/Src/main.c **** 
 181:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 182:Core/Src/main.c ****   /* USER CODE END 1 */
 183:Core/Src/main.c **** 
 184:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 185:Core/Src/main.c **** 
 186:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 187:Core/Src/main.c ****   HAL_Init();
 188:Core/Src/main.c **** 
 189:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 190:Core/Src/main.c **** 
 191:Core/Src/main.c ****   /* USER CODE END Init */
 192:Core/Src/main.c **** 
 193:Core/Src/main.c ****   /* Configure the system clock */
 194:Core/Src/main.c ****   SystemClock_Config();
 195:Core/Src/main.c **** 
 196:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 197:Core/Src/main.c **** 
 198:Core/Src/main.c ****   /* USER CODE END SysInit */
 199:Core/Src/main.c **** 
 200:Core/Src/main.c ****   /* Initialize all configured peripherals */
 201:Core/Src/main.c ****   MX_GPIO_Init();
 202:Core/Src/main.c ****   MX_USART2_UART_Init();
 203:Core/Src/main.c ****   MX_CAN1_Init();
 204:Core/Src/main.c ****   MX_USART1_UART_Init();
 205:Core/Src/main.c ****   MX_USART3_UART_Init();
 206:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 207:Core/Src/main.c ****   HAL_CAN_Start(&hcan1);
 208:Core/Src/main.c ****   HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 209:Core/Src/main.c **** 
 210:Core/Src/main.c ****   /* USER CODE END 2 */
 211:Core/Src/main.c **** 
 212:Core/Src/main.c ****   /* Infinite loop */
 213:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 214:Core/Src/main.c **** 
 215:Core/Src/main.c ****   //remain in listening for a cansend frame
 216:Core/Src/main.c ****   HAL_UARTEx_ReceiveToIdle_IT(&huart2, (uint8_t *)serialBuffer, BUFFER_SIZE);
 217:Core/Src/main.c **** 
 218:Core/Src/main.c ****   while (1)
 219:Core/Src/main.c ****   {
 220:Core/Src/main.c ****     /* USER CODE END WHILE */
 221:Core/Src/main.c **** 
 222:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 223:Core/Src/main.c ****     if(ready2Send) {
 224:Core/Src/main.c ****       HAL_StatusTypeDef result =  HAL_UART_Transmit(&huart2, (uint8_t *) can2Uart, strlen(can2Uart)
 225:Core/Src/main.c ****       ready2Send = false;
 226:Core/Src/main.c ****     }
 227:Core/Src/main.c ****   }
 228:Core/Src/main.c ****   /* USER CODE END 3 */
 229:Core/Src/main.c **** }
 230:Core/Src/main.c **** 
ARM GAS  /tmp/cc4m9BWJ.s 			page 13


 231:Core/Src/main.c **** /**
 232:Core/Src/main.c ****   * @brief System Clock Configuration
 233:Core/Src/main.c ****   * @retval None
 234:Core/Src/main.c ****   */
 235:Core/Src/main.c **** void SystemClock_Config(void)
 236:Core/Src/main.c **** {
 237:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 238:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 239:Core/Src/main.c **** 
 240:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 241:Core/Src/main.c ****   */
 242:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 243:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 244:Core/Src/main.c **** 
 245:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 246:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 247:Core/Src/main.c ****   */
 248:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 249:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 250:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 251:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 252:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 4;
 253:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 72;
 254:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 255:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 3;
 256:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 257:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 258:Core/Src/main.c ****   {
 259:Core/Src/main.c ****     Error_Handler();
 260:Core/Src/main.c ****   }
 261:Core/Src/main.c **** 
 262:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 263:Core/Src/main.c ****   */
 264:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 265:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 266:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 267:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 268:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 269:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 270:Core/Src/main.c **** 
 271:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 272:Core/Src/main.c ****   {
 273:Core/Src/main.c ****     Error_Handler();
 274:Core/Src/main.c ****   }
 275:Core/Src/main.c **** }
 276:Core/Src/main.c **** 
 277:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 278:Core/Src/main.c **** 
 279:Core/Src/main.c **** /* USER CODE END 4 */
 280:Core/Src/main.c **** 
 281:Core/Src/main.c **** /**
 282:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 283:Core/Src/main.c ****   * @retval None
 284:Core/Src/main.c ****   */
 285:Core/Src/main.c **** void Error_Handler(void)
 286:Core/Src/main.c **** {
 424              		.loc 1 286 1 is_stmt 1 view -0
ARM GAS  /tmp/cc4m9BWJ.s 			page 14


 425              		.cfi_startproc
 426              		@ Volatile: function does not return.
 427              		@ args = 0, pretend = 0, frame = 0
 428              		@ frame_needed = 0, uses_anonymous_args = 0
 429              		@ link register save eliminated.
 287:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 288:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 289:Core/Src/main.c ****   __disable_irq();
 430              		.loc 1 289 3 view .LVU100
 431              	.LBB9:
 432              	.LBI9:
 433              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/cc4m9BWJ.s 			page 15


  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
ARM GAS  /tmp/cc4m9BWJ.s 			page 16


 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
ARM GAS  /tmp/cc4m9BWJ.s 			page 17


 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
ARM GAS  /tmp/cc4m9BWJ.s 			page 18


 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc4m9BWJ.s 			page 19


 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
ARM GAS  /tmp/cc4m9BWJ.s 			page 20


 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
ARM GAS  /tmp/cc4m9BWJ.s 			page 21


 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
ARM GAS  /tmp/cc4m9BWJ.s 			page 22


 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc4m9BWJ.s 			page 23


 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
ARM GAS  /tmp/cc4m9BWJ.s 			page 24


 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
ARM GAS  /tmp/cc4m9BWJ.s 			page 25


 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc4m9BWJ.s 			page 26


 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
ARM GAS  /tmp/cc4m9BWJ.s 			page 27


 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/cc4m9BWJ.s 			page 28


 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
ARM GAS  /tmp/cc4m9BWJ.s 			page 29


 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
ARM GAS  /tmp/cc4m9BWJ.s 			page 30


 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
ARM GAS  /tmp/cc4m9BWJ.s 			page 31


 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 434              		.loc 2 960 27 view .LVU101
 435              	.LBB10:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 436              		.loc 2 962 3 view .LVU102
 437              		.syntax unified
 438              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 439 0000 72B6     		cpsid i
 440              	@ 0 "" 2
 441              		.thumb
 442              		.syntax unified
 443              	.L28:
 444              	.LBE10:
 445              	.LBE9:
 290:Core/Src/main.c ****   while (1)
 446              		.loc 1 290 3 view .LVU103
 291:Core/Src/main.c ****   {
 292:Core/Src/main.c ****   }
 447              		.loc 1 292 3 view .LVU104
 290:Core/Src/main.c ****   while (1)
 448              		.loc 1 290 9 view .LVU105
 449 0002 FEE7     		b	.L28
 450              		.cfi_endproc
 451              	.LFE141:
 453              		.section	.text.SystemClock_Config,"ax",%progbits
 454              		.align	1
 455              		.global	SystemClock_Config
 456              		.syntax unified
 457              		.thumb
 458              		.thumb_func
 460              	SystemClock_Config:
 461              	.LFB140:
 236:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 462              		.loc 1 236 1 view -0
 463              		.cfi_startproc
 464              		@ args = 0, pretend = 0, frame = 80
 465              		@ frame_needed = 0, uses_anonymous_args = 0
 466 0000 00B5     		push	{lr}
 467              		.cfi_def_cfa_offset 4
 468              		.cfi_offset 14, -4
 469 0002 95B0     		sub	sp, sp, #84
 470              		.cfi_def_cfa_offset 88
 237:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 471              		.loc 1 237 3 view .LVU107
 237:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 472              		.loc 1 237 22 is_stmt 0 view .LVU108
 473 0004 3422     		movs	r2, #52
 474 0006 0021     		movs	r1, #0
 475 0008 07A8     		add	r0, sp, #28
 476 000a FFF7FEFF 		bl	memset
 477              	.LVL36:
 238:Core/Src/main.c **** 
 478              		.loc 1 238 3 is_stmt 1 view .LVU109
 238:Core/Src/main.c **** 
ARM GAS  /tmp/cc4m9BWJ.s 			page 32


 479              		.loc 1 238 22 is_stmt 0 view .LVU110
 480 000e 0023     		movs	r3, #0
 481 0010 0293     		str	r3, [sp, #8]
 482 0012 0393     		str	r3, [sp, #12]
 483 0014 0493     		str	r3, [sp, #16]
 484 0016 0593     		str	r3, [sp, #20]
 485 0018 0693     		str	r3, [sp, #24]
 242:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 486              		.loc 1 242 3 is_stmt 1 view .LVU111
 487              	.LBB11:
 242:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 488              		.loc 1 242 3 view .LVU112
 489 001a 0093     		str	r3, [sp]
 242:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 490              		.loc 1 242 3 view .LVU113
 491 001c 204A     		ldr	r2, .L35
 492 001e 116C     		ldr	r1, [r2, #64]
 493 0020 41F08051 		orr	r1, r1, #268435456
 494 0024 1164     		str	r1, [r2, #64]
 242:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 495              		.loc 1 242 3 view .LVU114
 496 0026 126C     		ldr	r2, [r2, #64]
 497 0028 02F08052 		and	r2, r2, #268435456
 498 002c 0092     		str	r2, [sp]
 242:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 499              		.loc 1 242 3 view .LVU115
 500 002e 009A     		ldr	r2, [sp]
 501              	.LBE11:
 242:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 502              		.loc 1 242 3 view .LVU116
 243:Core/Src/main.c **** 
 503              		.loc 1 243 3 view .LVU117
 504              	.LBB12:
 243:Core/Src/main.c **** 
 505              		.loc 1 243 3 view .LVU118
 506 0030 0193     		str	r3, [sp, #4]
 243:Core/Src/main.c **** 
 507              		.loc 1 243 3 view .LVU119
 508 0032 1C4A     		ldr	r2, .L35+4
 509 0034 1368     		ldr	r3, [r2]
 510 0036 23F44043 		bic	r3, r3, #49152
 511 003a 43F48043 		orr	r3, r3, #16384
 512 003e 1360     		str	r3, [r2]
 243:Core/Src/main.c **** 
 513              		.loc 1 243 3 view .LVU120
 514 0040 1368     		ldr	r3, [r2]
 515 0042 03F44043 		and	r3, r3, #49152
 516 0046 0193     		str	r3, [sp, #4]
 243:Core/Src/main.c **** 
 517              		.loc 1 243 3 view .LVU121
 518 0048 019B     		ldr	r3, [sp, #4]
 519              	.LBE12:
 243:Core/Src/main.c **** 
 520              		.loc 1 243 3 view .LVU122
 248:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 521              		.loc 1 248 3 view .LVU123
 248:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
ARM GAS  /tmp/cc4m9BWJ.s 			page 33


 522              		.loc 1 248 36 is_stmt 0 view .LVU124
 523 004a 0123     		movs	r3, #1
 524 004c 0793     		str	r3, [sp, #28]
 249:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 525              		.loc 1 249 3 is_stmt 1 view .LVU125
 249:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 526              		.loc 1 249 30 is_stmt 0 view .LVU126
 527 004e 4FF48033 		mov	r3, #65536
 528 0052 0893     		str	r3, [sp, #32]
 250:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 529              		.loc 1 250 3 is_stmt 1 view .LVU127
 250:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 530              		.loc 1 250 34 is_stmt 0 view .LVU128
 531 0054 0223     		movs	r3, #2
 532 0056 0D93     		str	r3, [sp, #52]
 251:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 4;
 533              		.loc 1 251 3 is_stmt 1 view .LVU129
 251:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 4;
 534              		.loc 1 251 35 is_stmt 0 view .LVU130
 535 0058 4FF48002 		mov	r2, #4194304
 536 005c 0E92     		str	r2, [sp, #56]
 252:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 72;
 537              		.loc 1 252 3 is_stmt 1 view .LVU131
 252:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 72;
 538              		.loc 1 252 30 is_stmt 0 view .LVU132
 539 005e 0422     		movs	r2, #4
 540 0060 0F92     		str	r2, [sp, #60]
 253:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 541              		.loc 1 253 3 is_stmt 1 view .LVU133
 253:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 542              		.loc 1 253 30 is_stmt 0 view .LVU134
 543 0062 4822     		movs	r2, #72
 544 0064 1092     		str	r2, [sp, #64]
 254:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 3;
 545              		.loc 1 254 3 is_stmt 1 view .LVU135
 254:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 3;
 546              		.loc 1 254 30 is_stmt 0 view .LVU136
 547 0066 1193     		str	r3, [sp, #68]
 255:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 548              		.loc 1 255 3 is_stmt 1 view .LVU137
 255:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 549              		.loc 1 255 30 is_stmt 0 view .LVU138
 550 0068 0322     		movs	r2, #3
 551 006a 1292     		str	r2, [sp, #72]
 256:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 552              		.loc 1 256 3 is_stmt 1 view .LVU139
 256:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 553              		.loc 1 256 30 is_stmt 0 view .LVU140
 554 006c 1393     		str	r3, [sp, #76]
 257:Core/Src/main.c ****   {
 555              		.loc 1 257 3 is_stmt 1 view .LVU141
 257:Core/Src/main.c ****   {
 556              		.loc 1 257 7 is_stmt 0 view .LVU142
 557 006e 07A8     		add	r0, sp, #28
 558 0070 FFF7FEFF 		bl	HAL_RCC_OscConfig
 559              	.LVL37:
 257:Core/Src/main.c ****   {
ARM GAS  /tmp/cc4m9BWJ.s 			page 34


 560              		.loc 1 257 6 discriminator 1 view .LVU143
 561 0074 80B9     		cbnz	r0, .L33
 264:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 562              		.loc 1 264 3 is_stmt 1 view .LVU144
 264:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 563              		.loc 1 264 31 is_stmt 0 view .LVU145
 564 0076 0F23     		movs	r3, #15
 565 0078 0293     		str	r3, [sp, #8]
 266:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 566              		.loc 1 266 3 is_stmt 1 view .LVU146
 266:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 567              		.loc 1 266 34 is_stmt 0 view .LVU147
 568 007a 0221     		movs	r1, #2
 569 007c 0391     		str	r1, [sp, #12]
 267:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 570              		.loc 1 267 3 is_stmt 1 view .LVU148
 267:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 571              		.loc 1 267 35 is_stmt 0 view .LVU149
 572 007e 0023     		movs	r3, #0
 573 0080 0493     		str	r3, [sp, #16]
 268:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 574              		.loc 1 268 3 is_stmt 1 view .LVU150
 268:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 575              		.loc 1 268 36 is_stmt 0 view .LVU151
 576 0082 4FF48052 		mov	r2, #4096
 577 0086 0592     		str	r2, [sp, #20]
 269:Core/Src/main.c **** 
 578              		.loc 1 269 3 is_stmt 1 view .LVU152
 269:Core/Src/main.c **** 
 579              		.loc 1 269 36 is_stmt 0 view .LVU153
 580 0088 0693     		str	r3, [sp, #24]
 271:Core/Src/main.c ****   {
 581              		.loc 1 271 3 is_stmt 1 view .LVU154
 271:Core/Src/main.c ****   {
 582              		.loc 1 271 7 is_stmt 0 view .LVU155
 583 008a 02A8     		add	r0, sp, #8
 584 008c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 585              	.LVL38:
 271:Core/Src/main.c ****   {
 586              		.loc 1 271 6 discriminator 1 view .LVU156
 587 0090 20B9     		cbnz	r0, .L34
 275:Core/Src/main.c **** 
 588              		.loc 1 275 1 view .LVU157
 589 0092 15B0     		add	sp, sp, #84
 590              		.cfi_remember_state
 591              		.cfi_def_cfa_offset 4
 592              		@ sp needed
 593 0094 5DF804FB 		ldr	pc, [sp], #4
 594              	.L33:
 595              		.cfi_restore_state
 259:Core/Src/main.c ****   }
 596              		.loc 1 259 5 is_stmt 1 view .LVU158
 597 0098 FFF7FEFF 		bl	Error_Handler
 598              	.LVL39:
 599              	.L34:
 273:Core/Src/main.c ****   }
 600              		.loc 1 273 5 view .LVU159
ARM GAS  /tmp/cc4m9BWJ.s 			page 35


 601 009c FFF7FEFF 		bl	Error_Handler
 602              	.LVL40:
 603              	.L36:
 604              		.align	2
 605              	.L35:
 606 00a0 00380240 		.word	1073887232
 607 00a4 00700040 		.word	1073770496
 608              		.cfi_endproc
 609              	.LFE140:
 611              		.section	.text.main,"ax",%progbits
 612              		.align	1
 613              		.global	main
 614              		.syntax unified
 615              		.thumb
 616              		.thumb_func
 618              	main:
 619              	.LFB139:
 179:Core/Src/main.c **** 
 620              		.loc 1 179 1 view -0
 621              		.cfi_startproc
 622              		@ args = 0, pretend = 0, frame = 0
 623              		@ frame_needed = 0, uses_anonymous_args = 0
 624 0000 10B5     		push	{r4, lr}
 625              		.cfi_def_cfa_offset 8
 626              		.cfi_offset 4, -8
 627              		.cfi_offset 14, -4
 187:Core/Src/main.c **** 
 628              		.loc 1 187 3 view .LVU161
 629 0002 FFF7FEFF 		bl	HAL_Init
 630              	.LVL41:
 194:Core/Src/main.c **** 
 631              		.loc 1 194 3 view .LVU162
 632 0006 FFF7FEFF 		bl	SystemClock_Config
 633              	.LVL42:
 201:Core/Src/main.c ****   MX_USART2_UART_Init();
 634              		.loc 1 201 3 view .LVU163
 635 000a FFF7FEFF 		bl	MX_GPIO_Init
 636              	.LVL43:
 202:Core/Src/main.c ****   MX_CAN1_Init();
 637              		.loc 1 202 3 view .LVU164
 638 000e FFF7FEFF 		bl	MX_USART2_UART_Init
 639              	.LVL44:
 203:Core/Src/main.c ****   MX_USART1_UART_Init();
 640              		.loc 1 203 3 view .LVU165
 641 0012 FFF7FEFF 		bl	MX_CAN1_Init
 642              	.LVL45:
 204:Core/Src/main.c ****   MX_USART3_UART_Init();
 643              		.loc 1 204 3 view .LVU166
 644 0016 FFF7FEFF 		bl	MX_USART1_UART_Init
 645              	.LVL46:
 205:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 646              		.loc 1 205 3 view .LVU167
 647 001a FFF7FEFF 		bl	MX_USART3_UART_Init
 648              	.LVL47:
 207:Core/Src/main.c ****   HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 649              		.loc 1 207 3 view .LVU168
 650 001e 104C     		ldr	r4, .L41
ARM GAS  /tmp/cc4m9BWJ.s 			page 36


 651 0020 2046     		mov	r0, r4
 652 0022 FFF7FEFF 		bl	HAL_CAN_Start
 653              	.LVL48:
 208:Core/Src/main.c **** 
 654              		.loc 1 208 3 view .LVU169
 655 0026 0221     		movs	r1, #2
 656 0028 2046     		mov	r0, r4
 657 002a FFF7FEFF 		bl	HAL_CAN_ActivateNotification
 658              	.LVL49:
 216:Core/Src/main.c **** 
 659              		.loc 1 216 3 view .LVU170
 660 002e 1922     		movs	r2, #25
 661 0030 0C49     		ldr	r1, .L41+4
 662 0032 0D48     		ldr	r0, .L41+8
 663 0034 FFF7FEFF 		bl	HAL_UARTEx_ReceiveToIdle_IT
 664              	.LVL50:
 665              	.L38:
 218:Core/Src/main.c ****   {
 666              		.loc 1 218 3 view .LVU171
 223:Core/Src/main.c ****       HAL_StatusTypeDef result =  HAL_UART_Transmit(&huart2, (uint8_t *) can2Uart, strlen(can2Uart)
 667              		.loc 1 223 5 view .LVU172
 223:Core/Src/main.c ****       HAL_StatusTypeDef result =  HAL_UART_Transmit(&huart2, (uint8_t *) can2Uart, strlen(can2Uart)
 668              		.loc 1 223 8 is_stmt 0 view .LVU173
 669 0038 0C4B     		ldr	r3, .L41+12
 670 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 223:Core/Src/main.c ****       HAL_StatusTypeDef result =  HAL_UART_Transmit(&huart2, (uint8_t *) can2Uart, strlen(can2Uart)
 671              		.loc 1 223 7 view .LVU174
 672 003c 002B     		cmp	r3, #0
 673 003e FBD0     		beq	.L38
 674              	.LBB13:
 224:Core/Src/main.c ****       ready2Send = false;
 675              		.loc 1 224 7 is_stmt 1 view .LVU175
 224:Core/Src/main.c ****       ready2Send = false;
 676              		.loc 1 224 84 is_stmt 0 view .LVU176
 677 0040 0B4C     		ldr	r4, .L41+16
 678 0042 2046     		mov	r0, r4
 679 0044 FFF7FEFF 		bl	strlen
 680              	.LVL51:
 224:Core/Src/main.c ****       ready2Send = false;
 681              		.loc 1 224 35 discriminator 1 view .LVU177
 682 0048 4FF0FF33 		mov	r3, #-1
 683 004c 82B2     		uxth	r2, r0
 684 004e 2146     		mov	r1, r4
 685 0050 0548     		ldr	r0, .L41+8
 686 0052 FFF7FEFF 		bl	HAL_UART_Transmit
 687              	.LVL52:
 225:Core/Src/main.c ****     }
 688              		.loc 1 225 7 is_stmt 1 view .LVU178
 225:Core/Src/main.c ****     }
 689              		.loc 1 225 18 is_stmt 0 view .LVU179
 690 0056 054B     		ldr	r3, .L41+12
 691 0058 0022     		movs	r2, #0
 692 005a 1A70     		strb	r2, [r3]
 693 005c ECE7     		b	.L38
 694              	.L42:
 695 005e 00BF     		.align	2
 696              	.L41:
ARM GAS  /tmp/cc4m9BWJ.s 			page 37


 697 0060 00000000 		.word	hcan1
 698 0064 00000000 		.word	serialBuffer
 699 0068 00000000 		.word	huart2
 700 006c 00000000 		.word	ready2Send
 701 0070 00000000 		.word	can2Uart
 702              	.LBE13:
 703              		.cfi_endproc
 704              	.LFE139:
 706              		.global	ready2Send
 707              		.section	.bss.ready2Send,"aw",%nobits
 710              	ready2Send:
 711 0000 00       		.space	1
 712              		.global	can2Uart
 713              		.section	.bss.can2Uart,"aw",%nobits
 714              		.align	2
 717              	can2Uart:
 718 0000 00000000 		.space	25
 718      00000000 
 718      00000000 
 718      00000000 
 718      00000000 
 719              		.global	RxData
 720              		.section	.bss.RxData,"aw",%nobits
 721              		.align	2
 724              	RxData:
 725 0000 00000000 		.space	8
 725      00000000 
 726              		.global	TxData
 727              		.section	.bss.TxData,"aw",%nobits
 728              		.align	2
 731              	TxData:
 732 0000 00000000 		.space	8
 732      00000000 
 733              		.global	TxMailBox
 734              		.section	.bss.TxMailBox,"aw",%nobits
 735              		.align	2
 738              	TxMailBox:
 739 0000 00000000 		.space	12
 739      00000000 
 739      00000000 
 740              		.global	RxHeader
 741              		.section	.bss.RxHeader,"aw",%nobits
 742              		.align	2
 745              	RxHeader:
 746 0000 00000000 		.space	28
 746      00000000 
 746      00000000 
 746      00000000 
 746      00000000 
 747              		.global	TxHeader
 748              		.section	.bss.TxHeader,"aw",%nobits
 749              		.align	2
 752              	TxHeader:
 753 0000 00000000 		.space	24
 753      00000000 
 753      00000000 
 753      00000000 
ARM GAS  /tmp/cc4m9BWJ.s 			page 38


 753      00000000 
 754              		.global	serialBuffer
 755              		.section	.bss.serialBuffer,"aw",%nobits
 756              		.align	2
 759              	serialBuffer:
 760 0000 00000000 		.space	25
 760      00000000 
 760      00000000 
 760      00000000 
 760      00000000 
 761              		.text
 762              	.Letext0:
 763              		.file 3 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-n
 764              		.file 4 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-n
 765              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 766              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 767              		.file 7 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-n
 768              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 769              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 770              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 771              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 772              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_can.h"
 773              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 774              		.file 14 "Core/Inc/can.h"
 775              		.file 15 "Core/Inc/usart.h"
 776              		.file 16 "Core/Inc/gpio.h"
 777              		.file 17 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-
 778              		.file 18 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-
 779              		.file 19 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-
 780              		.file 20 "<built-in>"
 781              		.file 21 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
ARM GAS  /tmp/cc4m9BWJ.s 			page 39


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/cc4m9BWJ.s:21     .rodata.HAL_CAN_RxFifo0MsgPendingCallback.str1.4:00000000 $d
     /tmp/cc4m9BWJ.s:31     .text.HAL_CAN_RxFifo0MsgPendingCallback:00000000 $t
     /tmp/cc4m9BWJ.s:37     .text.HAL_CAN_RxFifo0MsgPendingCallback:00000000 HAL_CAN_RxFifo0MsgPendingCallback
     /tmp/cc4m9BWJ.s:156    .text.HAL_CAN_RxFifo0MsgPendingCallback:0000006c $d
     /tmp/cc4m9BWJ.s:745    .bss.RxHeader:00000000 RxHeader
     /tmp/cc4m9BWJ.s:724    .bss.RxData:00000000 RxData
     /tmp/cc4m9BWJ.s:717    .bss.can2Uart:00000000 can2Uart
     /tmp/cc4m9BWJ.s:710    .bss.ready2Send:00000000 ready2Send
     /tmp/cc4m9BWJ.s:167    .text.HAL_UARTEx_RxEventCallback:00000000 $t
     /tmp/cc4m9BWJ.s:173    .text.HAL_UARTEx_RxEventCallback:00000000 HAL_UARTEx_RxEventCallback
     /tmp/cc4m9BWJ.s:404    .text.HAL_UARTEx_RxEventCallback:00000100 $d
     /tmp/cc4m9BWJ.s:759    .bss.serialBuffer:00000000 serialBuffer
     /tmp/cc4m9BWJ.s:752    .bss.TxHeader:00000000 TxHeader
     /tmp/cc4m9BWJ.s:731    .bss.TxData:00000000 TxData
     /tmp/cc4m9BWJ.s:738    .bss.TxMailBox:00000000 TxMailBox
     /tmp/cc4m9BWJ.s:416    .text.Error_Handler:00000000 $t
     /tmp/cc4m9BWJ.s:422    .text.Error_Handler:00000000 Error_Handler
     /tmp/cc4m9BWJ.s:454    .text.SystemClock_Config:00000000 $t
     /tmp/cc4m9BWJ.s:460    .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/cc4m9BWJ.s:606    .text.SystemClock_Config:000000a0 $d
     /tmp/cc4m9BWJ.s:612    .text.main:00000000 $t
     /tmp/cc4m9BWJ.s:618    .text.main:00000000 main
     /tmp/cc4m9BWJ.s:697    .text.main:00000060 $d
     /tmp/cc4m9BWJ.s:711    .bss.ready2Send:00000000 $d
     /tmp/cc4m9BWJ.s:714    .bss.can2Uart:00000000 $d
     /tmp/cc4m9BWJ.s:721    .bss.RxData:00000000 $d
     /tmp/cc4m9BWJ.s:728    .bss.TxData:00000000 $d
     /tmp/cc4m9BWJ.s:735    .bss.TxMailBox:00000000 $d
     /tmp/cc4m9BWJ.s:742    .bss.RxHeader:00000000 $d
     /tmp/cc4m9BWJ.s:749    .bss.TxHeader:00000000 $d
     /tmp/cc4m9BWJ.s:756    .bss.serialBuffer:00000000 $d

UNDEFINED SYMBOLS
HAL_CAN_GetRxMessage
sprintf
strlen
strncpy
strtol
HAL_UARTEx_ReceiveToIdle_IT
HAL_CAN_AddTxMessage
huart2
hcan1
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
MX_GPIO_Init
MX_USART2_UART_Init
MX_CAN1_Init
MX_USART1_UART_Init
MX_USART3_UART_Init
HAL_CAN_Start
HAL_CAN_ActivateNotification
HAL_UART_Transmit
